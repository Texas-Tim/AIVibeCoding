{"mappings":"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","sources":["<anon>","src/main.js","src/core/local-storage.js","src/core/asset-loader.js","src/core/game-state.js","src/logic/physics-engine.js","src/config.js","src/logic/ai-controller.js","src/logic/audio-manager.js","src/presentation/canvas-renderer.js","src/presentation/input-handler.js","src/controllers/game-controller.js"],"sourcesContent":["/**\n * Local Storage utility for game data persistence\n */ class $a8a4f6cc120ddce7$export$19fffca37ef3e106 {\n    constructor(){\n        this.prefix = 'ultimate-frisbee-';\n    }\n    save(key, data) {\n        try {\n            const serialized = JSON.stringify(data);\n            localStorage.setItem(this.prefix + key, serialized);\n            return true;\n        } catch (error) {\n            console.error('Failed to save to localStorage:', error);\n            return false;\n        }\n    }\n    load(key, defaultValue = null) {\n        try {\n            const item = localStorage.getItem(this.prefix + key);\n            return item ? JSON.parse(item) : defaultValue;\n        } catch (error) {\n            console.error('Failed to load from localStorage:', error);\n            return defaultValue;\n        }\n    }\n    remove(key) {\n        try {\n            localStorage.removeItem(this.prefix + key);\n            return true;\n        } catch (error) {\n            console.error('Failed to remove from localStorage:', error);\n            return false;\n        }\n    }\n    clear() {\n        try {\n            const keys = Object.keys(localStorage);\n            keys.forEach((key)=>{\n                if (key.startsWith(this.prefix)) localStorage.removeItem(key);\n            });\n            return true;\n        } catch (error) {\n            console.error('Failed to clear localStorage:', error);\n            return false;\n        }\n    }\n}\n\n\n/**\n * Asset Loader for sprites and audio files\n */ class $255649eb9271def6$export$356f5f2a609e254f {\n    constructor(){\n        this.assets = new Map();\n        this.loadPromises = new Map();\n    }\n    async loadImage(name, path) {\n        if (this.assets.has(name)) {\n            console.log(`Asset ${name} already loaded`);\n            return this.assets.get(name);\n        }\n        if (this.loadPromises.has(name)) return this.loadPromises.get(name);\n        console.log(`Loading image: ${name} from ${path}`);\n        const promise = new Promise((resolve, reject)=>{\n            const img = new Image();\n            img.onload = ()=>{\n                console.log(`Successfully loaded image: ${name}`);\n                this.assets.set(name, img);\n                this.loadPromises.delete(name);\n                resolve(img);\n            };\n            img.onerror = (error)=>{\n                console.error(`Failed to load image: ${name} from ${path}`, error);\n                this.loadPromises.delete(name);\n                reject(new Error(`Failed to load image: ${path}`));\n            };\n            img.src = path;\n        });\n        this.loadPromises.set(name, promise);\n        return promise;\n    }\n    async loadAudio(name, path) {\n        if (this.assets.has(name)) return this.assets.get(name);\n        if (this.loadPromises.has(name)) return this.loadPromises.get(name);\n        const promise = new Promise((resolve, reject)=>{\n            const audio = new Audio();\n            audio.oncanplaythrough = ()=>{\n                this.assets.set(name, audio);\n                this.loadPromises.delete(name);\n                resolve(audio);\n            };\n            audio.onerror = ()=>{\n                this.loadPromises.delete(name);\n                reject(new Error(`Failed to load audio: ${path}`));\n            };\n            audio.src = path;\n        });\n        this.loadPromises.set(name, promise);\n        return promise;\n    }\n    async loadAssets(assetList) {\n        console.log('Loading assets:', assetList);\n        const promises = assetList.map((asset)=>{\n            if (asset.type === 'image') return this.loadImage(asset.name, asset.path);\n            else if (asset.type === 'audio') return this.loadAudio(asset.name, asset.path);\n        });\n        const results = await Promise.all(promises);\n        console.log('Assets loaded:', this.assets);\n        return results;\n    }\n    getAsset(name) {\n        return this.assets.get(name);\n    }\n    hasAsset(name) {\n        return this.assets.has(name);\n    }\n}\n\n\n/**\n * Central Game State Management\n */ class $3d7acf461522ca86$export$eb5ccdbd077479c {\n    constructor(){\n        this.state = {\n            currentScreen: 'menu',\n            score: {\n                team1: 0,\n                team2: 0\n            },\n            gameTime: 180,\n            players: [],\n            frisbee: null,\n            field: null,\n            gameSettings: {\n                difficulty: 'medium',\n                soundEnabled: true,\n                musicEnabled: true\n            }\n        };\n        this.listeners = new Map();\n    }\n    setState(key, value) {\n        const oldValue = this.state[key];\n        this.state[key] = value;\n        this.notifyListeners(key, value, oldValue);\n    }\n    getState(key) {\n        return key ? this.state[key] : this.state;\n    }\n    updateState(updates) {\n        Object.keys(updates).forEach((key)=>{\n            this.setState(key, updates[key]);\n        });\n    }\n    subscribe(key, callback) {\n        if (!this.listeners.has(key)) this.listeners.set(key, []);\n        this.listeners.get(key).push(callback);\n        return ()=>{\n            const callbacks = this.listeners.get(key);\n            const index = callbacks.indexOf(callback);\n            if (index > -1) callbacks.splice(index, 1);\n        };\n    }\n    notifyListeners(key, newValue, oldValue) {\n        const callbacks = this.listeners.get(key);\n        if (callbacks) callbacks.forEach((callback)=>{\n            try {\n                callback(newValue, oldValue);\n            } catch (error) {\n                console.error('Error in state listener:', error);\n            }\n        });\n    }\n    reset() {\n        this.setState('score', {\n            team1: 0,\n            team2: 0\n        });\n        this.setState('gameTime', 180);\n        this.setState('currentScreen', 'menu');\n    }\n}\n\n\n/**\n * Game Configuration\n */ const $bebe1cbb5a309c8c$export$1630b5343357e8b5 = {\n    // Canvas settings\n    CANVAS_WIDTH: 800,\n    CANVAS_HEIGHT: 600,\n    TARGET_FPS: 60,\n    // Field dimensions\n    FIELD_WIDTH: 700,\n    FIELD_HEIGHT: 500,\n    END_ZONE_WIDTH: 100,\n    // Player settings\n    PLAYER_SIZE: 16,\n    PLAYER_SPEED: 120,\n    TEAM_SIZE: 3,\n    // Frisbee settings\n    FRISBEE_SIZE: 8,\n    FRISBEE_SPEED: 200,\n    THROW_POWER_MAX: 300,\n    // Game settings\n    GAME_DURATION: 180,\n    SCORE_TO_WIN: 7,\n    // Physics\n    FRICTION: 0.95,\n    COLLISION_DISTANCE: 20,\n    // Colors (8-bit palette)\n    COLORS: {\n        FIELD: '#2a5d31',\n        END_ZONE: '#1a4d21',\n        FIELD_LINES: '#ffffff',\n        TEAM1: '#ff4444',\n        TEAM2: '#4444ff',\n        FRISBEE: '#ffff44',\n        UI_TEXT: '#ffffff',\n        UI_BACKGROUND: '#000000'\n    },\n    // Asset paths\n    ASSETS: {\n        SPRITES: {\n            PLAYER_TEAM1: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/player-red.png',\n            PLAYER_TEAM2: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/player-blue.png',\n            FRISBEE: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/frisbee.png',\n            FIELD_MARKER: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/field-marker.png'\n        },\n        AUDIO: {\n            THROW: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/throw.mp3',\n            CATCH: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/catch.mp3',\n            SCORE: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/score.mp3',\n            WHISTLE: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/whistle.mp3',\n            BACKGROUND_MUSIC: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/background.mp3'\n        }\n    }\n};\n\n\nclass $7d305a1ba637179b$export$69b1b1c72d4bbb9d {\n    constructor(){\n        this.gravity = 0;\n        this.friction = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).FRICTION;\n    }\n    updatePosition(entity, deltaTime) {\n        entity.x += entity.velocityX * deltaTime;\n        entity.y += entity.velocityY * deltaTime;\n        // Apply friction\n        entity.velocityX *= this.friction;\n        entity.velocityY *= this.friction;\n        // Boundary checking\n        this.checkBoundaries(entity);\n    }\n    checkBoundaries(entity) {\n        const halfSize = entity.size / 2;\n        if (entity.x - halfSize < 0) {\n            entity.x = halfSize;\n            entity.velocityX = 0;\n        }\n        if (entity.x + halfSize > (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH) {\n            entity.x = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH - halfSize;\n            entity.velocityX = 0;\n        }\n        if (entity.y - halfSize < 0) {\n            entity.y = halfSize;\n            entity.velocityY = 0;\n        }\n        if (entity.y + halfSize > (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT) {\n            entity.y = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT - halfSize;\n            entity.velocityY = 0;\n        }\n    }\n    checkCollision(entity1, entity2) {\n        const dx = entity1.x - entity2.x;\n        const dy = entity1.y - entity2.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const minDistance = (entity1.size + entity2.size) / 2;\n        return distance < minDistance;\n    }\n    resolveCollision(entity1, entity2) {\n        const dx = entity1.x - entity2.x;\n        const dy = entity1.y - entity2.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance === 0) return;\n        const overlap = (entity1.size + entity2.size) / 2 - distance;\n        const separationX = dx / distance * overlap * 0.5;\n        const separationY = dy / distance * overlap * 0.5;\n        entity1.x += separationX;\n        entity1.y += separationY;\n        entity2.x -= separationX;\n        entity2.y -= separationY;\n    }\n    calculateThrowVector(fromX, fromY, toX, toY, power) {\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance === 0) return {\n            x: 0,\n            y: 0\n        };\n        const normalizedX = dx / distance;\n        const normalizedY = dy / distance;\n        return {\n            x: normalizedX * power,\n            y: normalizedY * power\n        };\n    }\n}\n\n\n\nclass $424d233ae2a12642$export$badae6bab0f3493e {\n    constructor(gameState){\n        this.gameState = gameState;\n        this.difficulty = 'medium';\n        this.reactionTime = 0.5; // seconds\n        this.lastDecision = 0;\n    }\n    update(deltaTime, players, frisbee) {\n        this.lastDecision += deltaTime;\n        if (this.lastDecision < this.reactionTime) return;\n        const aiPlayers = players.filter((p)=>p.isAI);\n        aiPlayers.forEach((player)=>{\n            this.updatePlayerAI(player, frisbee, players, deltaTime);\n        });\n        this.lastDecision = 0;\n    }\n    updatePlayerAI(player, frisbee, allPlayers, deltaTime) {\n        if (player.hasFrisbee) this.handleOffensiveAI(player, frisbee, allPlayers);\n        else this.handleDefensiveAI(player, frisbee, allPlayers);\n    }\n    handleOffensiveAI(player, frisbee, allPlayers) {\n        const teammates = allPlayers.filter((p)=>p.team === player.team && p !== player);\n        const opponents = allPlayers.filter((p)=>p.team !== player.team);\n        // Find best teammate to throw to\n        let bestTarget = null;\n        let bestScore = -1;\n        teammates.forEach((teammate)=>{\n            const score = this.evaluateThrowTarget(player, teammate, opponents);\n            if (score > bestScore) {\n                bestScore = score;\n                bestTarget = teammate;\n            }\n        });\n        if (bestTarget && bestScore > 0.3) this.throwToTarget(player, bestTarget, frisbee);\n    }\n    handleDefensiveAI(player, frisbee, allPlayers) {\n        const opponents = allPlayers.filter((p)=>p.team !== player.team);\n        if (frisbee.isFlying) // Try to intercept frisbee\n        this.moveTowards(player, frisbee.x, frisbee.y);\n        else {\n            // Mark nearest opponent\n            const nearestOpponent = this.findNearestOpponent(player, opponents);\n            if (nearestOpponent) this.markOpponent(player, nearestOpponent);\n        }\n    }\n    evaluateThrowTarget(thrower, target, opponents) {\n        const distance = this.getDistance(thrower, target);\n        const distanceScore = Math.max(0, 1 - distance / 200);\n        // Check if target is open\n        const nearestDefender = this.findNearestOpponent(target, opponents);\n        const openScore = nearestDefender ? Math.max(0, this.getDistance(target, nearestDefender) / 50 - 1) : 1;\n        // Prefer forward progress\n        const progressScore = target.y < thrower.y ? 0.5 : 0;\n        return (distanceScore + openScore + progressScore) / 3;\n    }\n    throwToTarget(player, target, frisbee) {\n        const power = Math.min((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).THROW_POWER_MAX, this.getDistance(player, target) * 2);\n        // Lead the target slightly\n        const leadX = target.velocityX * 0.3;\n        const leadY = target.velocityY * 0.3;\n        frisbee.throw(player.x, player.y, target.x + leadX, target.y + leadY, power);\n        player.hasFrisbee = false;\n    }\n    moveTowards(player, targetX, targetY) {\n        const dx = targetX - player.x;\n        const dy = targetY - player.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance > 5) {\n            player.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n            player.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n        }\n    }\n    markOpponent(player, opponent) {\n        const idealDistance = 30;\n        const dx = opponent.x - player.x;\n        const dy = opponent.y - player.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance > idealDistance + 10) this.moveTowards(player, opponent.x, opponent.y);\n        else if (distance < idealDistance - 10) this.moveTowards(player, player.x - dx * 0.1, player.y - dy * 0.1);\n    }\n    findNearestOpponent(player, opponents) {\n        let nearest = null;\n        let minDistance = Infinity;\n        opponents.forEach((opponent)=>{\n            const distance = this.getDistance(player, opponent);\n            if (distance < minDistance) {\n                minDistance = distance;\n                nearest = opponent;\n            }\n        });\n        return nearest;\n    }\n    getDistance(entity1, entity2) {\n        const dx = entity1.x - entity2.x;\n        const dy = entity1.y - entity2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    setDifficulty(difficulty) {\n        this.difficulty = difficulty;\n        switch(difficulty){\n            case 'easy':\n                this.reactionTime = 1.0;\n                break;\n            case 'medium':\n                this.reactionTime = 0.5;\n                break;\n            case 'hard':\n                this.reactionTime = 0.2;\n                break;\n        }\n    }\n}\n\n\n/**\n * Audio Manager for sound effects and music\n */ class $1cc9a11145b9c8d6$export$557a8016f4e0c1ba {\n    constructor(assetLoader){\n        this.assetLoader = assetLoader;\n        this.sounds = new Map();\n        this.music = null;\n        this.soundEnabled = true;\n        this.musicEnabled = true;\n        this.masterVolume = 1.0;\n        this.soundVolume = 0.7;\n        this.musicVolume = 0.3;\n    }\n    async initialize() {\n        // Initialize Web Audio API for programmatic sounds\n        try {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            // Try to load background music file\n            await this.loadBackgroundMusic();\n        } catch (error) {\n            console.warn('Web Audio API not supported', error);\n            this.audioContext = null;\n        }\n    }\n    async loadBackgroundMusic() {\n        console.log(\"\\uD83C\\uDFB5 Checking browser permissions and loading music...\");\n        console.log('Location:', window.location.href);\n        console.log('Protocol:', window.location.protocol);\n        // Check if running from file:// protocol\n        if (window.location.protocol === 'file:') {\n            console.warn(\"\\u26A0\\uFE0F Running from file:// protocol - audio may not load\");\n            console.log(\"\\uD83D\\uDCA1 Try running from http://localhost instead\");\n        }\n        try {\n            console.log(\"\\uD83D\\uDD0D Trying MP3 file...\");\n            this.music = new Audio('assets/audio/background-music.mp3');\n            this.music.loop = true;\n            this.music.volume = this.masterVolume * this.musicVolume;\n            // Add detailed error logging\n            this.music.addEventListener('error', (e)=>{\n                console.error(\"\\u274C MP3 Error details:\", {\n                    error: e.target.error,\n                    networkState: e.target.networkState,\n                    readyState: e.target.readyState,\n                    src: e.target.src\n                });\n            });\n            await new Promise((resolve, reject)=>{\n                const timeout = setTimeout(()=>{\n                    reject(new Error('MP3 load timeout'));\n                }, 3000);\n                this.music.addEventListener('canplaythrough', ()=>{\n                    clearTimeout(timeout);\n                    resolve();\n                }, {\n                    once: true\n                });\n                this.music.addEventListener('error', (e)=>{\n                    clearTimeout(timeout);\n                    reject(e);\n                }, {\n                    once: true\n                });\n                this.music.load();\n            });\n            console.log(\"\\u2705 MP3 background music loaded successfully\");\n        } catch (error) {\n            console.warn(\"\\u274C MP3 failed, trying WAV:\", error.message);\n            try {\n                console.log(\"\\uD83D\\uDD0D Trying WAV file...\");\n                this.music = new Audio('assets/audio/background-music.wav');\n                this.music.loop = true;\n                this.music.volume = this.masterVolume * this.musicVolume;\n                this.music.addEventListener('error', (e)=>{\n                    console.error(\"\\u274C WAV Error details:\", {\n                        error: e.target.error,\n                        networkState: e.target.networkState,\n                        readyState: e.target.readyState,\n                        src: e.target.src\n                    });\n                });\n                await new Promise((resolve, reject)=>{\n                    const timeout = setTimeout(()=>{\n                        reject(new Error('WAV load timeout'));\n                    }, 3000);\n                    this.music.addEventListener('canplaythrough', ()=>{\n                        clearTimeout(timeout);\n                        resolve();\n                    }, {\n                        once: true\n                    });\n                    this.music.addEventListener('error', (e)=>{\n                        clearTimeout(timeout);\n                        reject(e);\n                    }, {\n                        once: true\n                    });\n                    this.music.load();\n                });\n                console.log(\"\\u2705 WAV background music loaded successfully\");\n            } catch (wavError) {\n                console.error(\"\\u274C Both MP3 and WAV failed:\", wavError.message);\n                console.log(\"\\uD83D\\uDCA1 Suggestions:\");\n                console.log('- Check if files exist in assets/audio/');\n                console.log('- Ensure running from http://localhost (not file://)');\n                console.log('- Check browser console for CORS errors');\n                console.log('- Verify audio file formats are supported');\n                this.music = null;\n            }\n        }\n    }\n    createProgrammaticMusic() {\n        if (!this.audioContext) return;\n        this.musicGainNode = this.audioContext.createGain();\n        this.musicGainNode.connect(this.audioContext.destination);\n        this.musicGainNode.gain.setValueAtTime(this.masterVolume * this.musicVolume * 0.1, this.audioContext.currentTime);\n        this.music = {\n            playing: false,\n            paused: false,\n            volume: this.masterVolume * this.musicVolume,\n            play: ()=>this.startProgrammaticMusic(),\n            pause: ()=>this.stopProgrammaticMusic(),\n            currentTime: 0,\n            loop: true\n        };\n        console.log(\"\\u2705 Programmatic background music ready\");\n    }\n    startProgrammaticMusic() {\n        if (!this.audioContext || this.music.playing) return;\n        this.music.playing = true;\n        this.playMelodyLoop();\n    }\n    stopProgrammaticMusic() {\n        this.music.playing = false;\n        if (this.melodyTimeout) clearTimeout(this.melodyTimeout);\n    }\n    playMelodyLoop() {\n        if (!this.music.playing) return;\n        const melody = [\n            262,\n            294,\n            330,\n            349,\n            392,\n            440,\n            494,\n            523\n        ];\n        const rhythm = [\n            0.5,\n            0.5,\n            0.5,\n            0.5,\n            1,\n            0.5,\n            0.5,\n            1\n        ];\n        let noteIndex = 0;\n        const playNote = ()=>{\n            if (!this.music.playing) return;\n            const freq = melody[noteIndex % melody.length];\n            const duration = rhythm[noteIndex % rhythm.length] * 0.3;\n            const oscillator = this.audioContext.createOscillator();\n            const noteGain = this.audioContext.createGain();\n            oscillator.connect(noteGain);\n            noteGain.connect(this.musicGainNode);\n            oscillator.frequency.setValueAtTime(freq, this.audioContext.currentTime);\n            oscillator.type = 'square';\n            noteGain.gain.setValueAtTime(0.1, this.audioContext.currentTime);\n            noteGain.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);\n            oscillator.start(this.audioContext.currentTime);\n            oscillator.stop(this.audioContext.currentTime + duration);\n            noteIndex++;\n            this.melodyTimeout = setTimeout(playNote, duration * 1000);\n        };\n        playNote();\n    }\n    playSound(soundName, volume = 1.0) {\n        if (!this.soundEnabled || !this.audioContext) return;\n        try {\n            const finalVolume = this.masterVolume * this.soundVolume * volume;\n            switch(soundName){\n                case 'throw':\n                    this.playThrowSound(finalVolume);\n                    break;\n                case 'catch':\n                    this.playCatchSound(finalVolume);\n                    break;\n                case 'score':\n                    this.playScoreSound(finalVolume);\n                    break;\n                case 'whistle':\n                    this.playWhistleSound(finalVolume);\n                    break;\n            }\n        } catch (error) {\n            console.warn(`Error playing sound: ${soundName}`, error);\n        }\n    }\n    playThrowSound(volume) {\n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        oscillator.frequency.setValueAtTime(200, this.audioContext.currentTime);\n        oscillator.frequency.exponentialRampToValueAtTime(100, this.audioContext.currentTime + 0.2);\n        gainNode.gain.setValueAtTime(volume * 0.3, this.audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.2);\n        oscillator.start(this.audioContext.currentTime);\n        oscillator.stop(this.audioContext.currentTime + 0.2);\n    }\n    playCatchSound(volume) {\n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        oscillator.frequency.setValueAtTime(400, this.audioContext.currentTime);\n        oscillator.frequency.exponentialRampToValueAtTime(600, this.audioContext.currentTime + 0.1);\n        gainNode.gain.setValueAtTime(volume * 0.2, this.audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.1);\n        oscillator.start(this.audioContext.currentTime);\n        oscillator.stop(this.audioContext.currentTime + 0.1);\n    }\n    playScoreSound(volume) {\n        // Play a celebratory ascending tone\n        const frequencies = [\n            262,\n            330,\n            392,\n            523\n        ]; // C, E, G, C\n        frequencies.forEach((freq, index)=>{\n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            oscillator.frequency.setValueAtTime(freq, this.audioContext.currentTime + index * 0.1);\n            gainNode.gain.setValueAtTime(volume * 0.2, this.audioContext.currentTime + index * 0.1);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + index * 0.1 + 0.2);\n            oscillator.start(this.audioContext.currentTime + index * 0.1);\n            oscillator.stop(this.audioContext.currentTime + index * 0.1 + 0.2);\n        });\n    }\n    playWhistleSound(volume) {\n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);\n        gainNode.gain.setValueAtTime(volume * 0.3, this.audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.5);\n        oscillator.start(this.audioContext.currentTime);\n        oscillator.stop(this.audioContext.currentTime + 0.5);\n    }\n    playMusic() {\n        if (!this.musicEnabled || !this.music) {\n            console.log(\"\\uD83D\\uDD07 Music disabled or not loaded\");\n            return;\n        }\n        try {\n            this.music.volume = this.masterVolume * this.musicVolume;\n            console.log(`\\u{1F3B5} Attempting to play music at volume: ${this.music.volume}`);\n            this.music.play().then(()=>{\n                console.log(\"\\u2705 Background music started playing\");\n            }).catch((error)=>{\n                console.warn(\"\\u274C Failed to play background music:\", error.message);\n                if (error.name === 'NotAllowedError') console.log(\"\\uD83D\\uDCA1 User interaction required - music will start after first click\");\n            });\n        } catch (error) {\n            console.warn('Error playing background music', error);\n        }\n    }\n    stopMusic() {\n        if (this.music) try {\n            this.music.pause();\n            this.music.currentTime = 0;\n        } catch (error) {\n            console.warn('Error stopping background music', error);\n        }\n    }\n    pauseMusic() {\n        if (this.music) try {\n            this.music.pause();\n        } catch (error) {\n            console.warn('Error pausing background music', error);\n        }\n    }\n    resumeMusic() {\n        if (this.musicEnabled && this.music) try {\n            this.music.play().catch((error)=>{\n                console.warn('Failed to resume background music', error);\n            });\n        } catch (error) {\n            console.warn('Error resuming background music', error);\n        }\n    }\n    setSoundEnabled(enabled) {\n        this.soundEnabled = enabled;\n    }\n    setMusicEnabled(enabled) {\n        this.musicEnabled = enabled;\n        if (!enabled) this.stopMusic();\n        else this.playMusic();\n    }\n    setMasterVolume(volume) {\n        this.masterVolume = Math.max(0, Math.min(1, volume));\n        if (this.music) this.music.volume = this.masterVolume * this.musicVolume;\n    }\n    setSoundVolume(volume) {\n        this.soundVolume = Math.max(0, Math.min(1, volume));\n    }\n    setMusicVolume(volume) {\n        this.musicVolume = Math.max(0, Math.min(1, volume));\n        if (this.music) this.music.volume = this.masterVolume * this.musicVolume;\n    }\n    // Game event handlers\n    onThrow() {\n        this.playSound('throw');\n    }\n    onCatch() {\n        this.playSound('catch');\n    }\n    onScore() {\n        this.playSound('score', 1.2);\n    }\n    onGameStart() {\n        this.playSound('whistle');\n        this.playMusic();\n    }\n    onGameEnd() {\n        this.playSound('whistle');\n        this.stopMusic();\n    }\n    onGamePause() {\n        this.pauseMusic();\n    }\n    onGameResume() {\n        this.resumeMusic();\n    }\n    // Call this after first user interaction to enable audio\n    enableAudioContext() {\n        if (this.audioContext && this.audioContext.state === 'suspended') this.audioContext.resume().then(()=>{\n            console.log(\"\\u2705 Audio context resumed\");\n        });\n        // Try to play music if it failed before\n        if (this.musicEnabled && this.music && this.music.paused) this.playMusic();\n    }\n}\n\n\n\nclass $3c41843540f07017$export$7adc20298958481a {\n    constructor(canvas, assetLoader){\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.assetLoader = assetLoader;\n        // Set canvas size\n        this.canvas.width = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH;\n        this.canvas.height = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT;\n        // Disable image smoothing for pixel-perfect 8-bit graphics\n        this.ctx.imageSmoothingEnabled = false;\n    }\n    clear() {\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.FIELD;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    drawField() {\n        // Draw field background\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.FIELD;\n        this.ctx.fillRect(0, 0, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        // Draw end zones\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.END_ZONE;\n        this.ctx.fillRect(0, 0, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        this.ctx.fillRect((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH, 0, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        // Draw field lines\n        this.ctx.strokeStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.FIELD_LINES;\n        this.ctx.lineWidth = 2;\n        // End zone lines\n        this.ctx.beginPath();\n        this.ctx.moveTo((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH, 0);\n        this.ctx.lineTo((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        this.ctx.moveTo((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH, 0);\n        this.ctx.lineTo((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        this.ctx.stroke();\n        // Center line\n        this.ctx.beginPath();\n        this.ctx.moveTo((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, 0);\n        this.ctx.lineTo((0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        this.ctx.stroke();\n    }\n    drawPlayer(player) {\n        const spriteName = player.team === 1 ? 'player-team1' : 'player-team2';\n        const sprite = this.assetLoader.getAsset(spriteName);\n        if (sprite && sprite.width > 0) this.ctx.drawImage(sprite, player.x - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE / 2, player.y - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE);\n        else {\n            // Fallback to colored rectangles\n            this.ctx.fillStyle = player.team === 1 ? (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.TEAM1 : (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.TEAM2;\n            this.ctx.fillRect(player.x - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE / 2, player.y - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE);\n        }\n        // Draw player number\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.UI_TEXT;\n        this.ctx.font = '10px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(player.number.toString(), player.x, player.y - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE / 2 - 5);\n        // Highlight player with frisbee\n        if (player.hasFrisbee) {\n            this.ctx.strokeStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.FRISBEE;\n            this.ctx.lineWidth = 2;\n            this.ctx.strokeRect(player.x - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE / 2 - 2, player.y - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE / 2 - 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE + 4, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE + 4);\n        }\n    }\n    drawFrisbee(frisbee) {\n        console.log('Drawing frisbee - visible:', frisbee.isVisible, 'flying:', frisbee.isFlying, 'pos:', frisbee.x, frisbee.y);\n        if (!frisbee.isVisible) return;\n        const sprite = this.assetLoader.getAsset('frisbee');\n        if (sprite) this.ctx.drawImage(sprite, frisbee.x - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).FRISBEE_SIZE / 2, frisbee.y - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).FRISBEE_SIZE / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).FRISBEE_SIZE, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).FRISBEE_SIZE);\n        else {\n            // Fallback to colored circle\n            this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.FRISBEE;\n            this.ctx.beginPath();\n            this.ctx.arc(frisbee.x, frisbee.y, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).FRISBEE_SIZE / 2, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        // Draw trajectory line when flying\n        if (frisbee.isFlying) {\n            this.ctx.strokeStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.FRISBEE;\n            this.ctx.lineWidth = 1;\n            this.ctx.setLineDash([\n                5,\n                5\n            ]);\n            this.ctx.beginPath();\n            this.ctx.moveTo(frisbee.startX, frisbee.startY);\n            this.ctx.lineTo(frisbee.x, frisbee.y);\n            this.ctx.stroke();\n            this.ctx.setLineDash([]);\n        }\n    }\n    drawUI(gameState) {\n        const state = gameState.getState();\n        // Draw score\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.UI_TEXT;\n        this.ctx.font = '20px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(`${state.score.team1} - ${state.score.team2}`, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, 30);\n        // Draw timer\n        const minutes = Math.floor(state.gameTime / 60);\n        const seconds = Math.floor(state.gameTime % 60);\n        const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n        this.ctx.fillText(timeString, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, 55);\n        // Draw game status\n        if (state.currentScreen === 'pause') this.drawPauseOverlay();\n        else if (state.currentScreen === 'gameOver') this.drawGameOverOverlay(state);\n    }\n    drawPauseOverlay() {\n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.fillRect(0, 0, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        // Pause text\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.UI_TEXT;\n        this.ctx.font = '40px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('PAUSED', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2);\n        this.ctx.font = '16px monospace';\n        this.ctx.fillText('Press SPACE to resume', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2 + 40);\n    }\n    drawGameOverOverlay(state) {\n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        this.ctx.fillRect(0, 0, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT);\n        // Game over text\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.UI_TEXT;\n        this.ctx.font = '40px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('GAME OVER', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2 - 40);\n        // Winner announcement\n        const winner = state.score.team1 > state.score.team2 ? 'Red Team' : 'Blue Team';\n        this.ctx.font = '24px monospace';\n        this.ctx.fillText(`${winner} Wins!`, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2);\n        // Final score\n        this.ctx.font = '20px monospace';\n        this.ctx.fillText(`Final Score: ${state.score.team1} - ${state.score.team2}`, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2 + 40);\n        this.ctx.font = '16px monospace';\n        this.ctx.fillText('Press R to restart', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2 + 80);\n    }\n    drawMenu() {\n        this.clear();\n        // Title\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.UI_TEXT;\n        this.ctx.font = '48px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('ULTIMATE', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, 80);\n        this.ctx.fillText('FRISBEE', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, 130);\n        // Welcome message\n        this.ctx.font = '16px monospace';\n        this.ctx.fillStyle = '#88ff88';\n        this.ctx.fillText('Welcome to the ultimate arcade frisbee experience!', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, 165);\n        this.ctx.fillStyle = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.UI_TEXT;\n        // Controls section\n        this.ctx.font = '20px monospace';\n        this.ctx.fillText('CONTROLS', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, 200);\n        this.ctx.font = '14px monospace';\n        this.ctx.textAlign = 'left';\n        const leftCol = 200;\n        const rightCol = 500;\n        let y = 240;\n        // Movement controls\n        this.ctx.fillText('MOVEMENT:', leftCol, y);\n        this.ctx.fillText('WASD or Arrow Keys', rightCol, y);\n        y += 25;\n        // Throwing\n        this.ctx.fillText('THROW FRISBEE:', leftCol, y);\n        this.ctx.fillText('Click target location', rightCol, y);\n        y += 25;\n        // Game controls\n        this.ctx.fillText('START GAME:', leftCol, y);\n        this.ctx.fillText('SPACE', rightCol, y);\n        y += 25;\n        this.ctx.fillText('PAUSE/RESUME:', leftCol, y);\n        this.ctx.fillText('SPACE or ESC', rightCol, y);\n        y += 25;\n        this.ctx.fillText('RESTART GAME:', leftCol, y);\n        this.ctx.fillText('R', rightCol, y);\n        y += 25;\n        this.ctx.fillText('MAIN MENU:', leftCol, y);\n        this.ctx.fillText('M', rightCol, y);\n        y += 25;\n        this.ctx.fillText('SELECT PLAYER:', leftCol, y);\n        this.ctx.fillText('1, 2, 3', rightCol, y);\n        y += 40;\n        // Game rules\n        this.ctx.font = '16px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('OBJECTIVE: Score by reaching opponent\\'s end zone with frisbee', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, y);\n        y += 25;\n        this.ctx.fillText(\"3 minutes \\u2022 First to 7 points wins\", (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, y);\n        y += 40;\n        // Start instruction\n        this.ctx.font = '18px monospace';\n        this.ctx.fillStyle = '#ffff44';\n        this.ctx.fillText('Press SPACE to start!', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH / 2, y);\n    }\n}\n\n\n/**\n * Input Handler for keyboard and mouse input\n */ class $e34a11d940d9f889$export$2c7a04567169355e {\n    constructor(canvas){\n        this.canvas = canvas;\n        this.keys = new Set();\n        this.mouse = {\n            x: 0,\n            y: 0,\n            clicked: false\n        };\n        this.callbacks = new Map();\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        // Keyboard events\n        document.addEventListener('keydown', (e)=>this.handleKeyDown(e));\n        document.addEventListener('keyup', (e)=>this.handleKeyUp(e));\n        // Mouse events\n        this.canvas.addEventListener('mousemove', (e)=>this.handleMouseMove(e));\n        this.canvas.addEventListener('mousedown', (e)=>this.handleMouseDown(e));\n        this.canvas.addEventListener('mouseup', (e)=>this.handleMouseUp(e));\n        // Prevent context menu on right click\n        this.canvas.addEventListener('contextmenu', (e)=>e.preventDefault());\n    }\n    handleKeyDown(event) {\n        this.keys.add(event.code);\n        this.triggerCallback('keydown', event.code);\n    }\n    handleKeyUp(event) {\n        this.keys.delete(event.code);\n        this.triggerCallback('keyup', event.code);\n    }\n    handleMouseMove(event) {\n        const rect = this.canvas.getBoundingClientRect();\n        this.mouse.x = event.clientX - rect.left;\n        this.mouse.y = event.clientY - rect.top;\n        this.triggerCallback('mousemove', this.mouse);\n    }\n    handleMouseDown(event) {\n        this.mouse.clicked = true;\n        this.triggerCallback('mousedown', this.mouse);\n    }\n    handleMouseUp(event) {\n        this.mouse.clicked = false;\n        this.triggerCallback('mouseup', this.mouse);\n    }\n    isKeyPressed(keyCode) {\n        return this.keys.has(keyCode);\n    }\n    getMovementVector() {\n        let x = 0;\n        let y = 0;\n        if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) x -= 1;\n        if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) x += 1;\n        if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) y -= 1;\n        if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) y += 1;\n        // Normalize diagonal movement\n        if (x !== 0 && y !== 0) {\n            const length = Math.sqrt(x * x + y * y);\n            x /= length;\n            y /= length;\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n    isActionPressed(action) {\n        switch(action){\n            case 'pause':\n                return this.isKeyPressed('Space') || this.isKeyPressed('Escape');\n            case 'restart':\n                return this.isKeyPressed('KeyR');\n            case 'throw':\n                return this.mouse.clicked;\n            default:\n                return false;\n        }\n    }\n    getMousePosition() {\n        return {\n            x: this.mouse.x,\n            y: this.mouse.y\n        };\n    }\n    on(event, callback) {\n        if (!this.callbacks.has(event)) this.callbacks.set(event, []);\n        this.callbacks.get(event).push(callback);\n    }\n    off(event, callback) {\n        const callbacks = this.callbacks.get(event);\n        if (callbacks) {\n            const index = callbacks.indexOf(callback);\n            if (index > -1) callbacks.splice(index, 1);\n        }\n    }\n    triggerCallback(event, data) {\n        const callbacks = this.callbacks.get(event);\n        if (callbacks) callbacks.forEach((callback)=>{\n            try {\n                callback(data);\n            } catch (error) {\n                console.error('Error in input callback:', error);\n            }\n        });\n    }\n    destroy() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n        document.removeEventListener('keyup', this.handleKeyUp);\n        this.canvas.removeEventListener('mousemove', this.handleMouseMove);\n        this.canvas.removeEventListener('mousedown', this.handleMouseDown);\n        this.canvas.removeEventListener('mouseup', this.handleMouseUp);\n        this.canvas.removeEventListener('contextmenu', (e)=>e.preventDefault());\n    }\n}\n\n\n\nclass $196999ef1341334b$export$f3f3f6c0124f08de {\n    constructor(gameState, physicsEngine, aiController, audioManager, renderer, inputHandler){\n        this.gameState = gameState;\n        this.physics = physicsEngine;\n        this.ai = aiController;\n        this.audio = audioManager;\n        this.renderer = renderer;\n        this.input = inputHandler;\n        this.players = [];\n        this.frisbee = null;\n        this.lastTime = 0;\n        this.gameLoop = null;\n        this.initializeGame();\n        this.setupInputHandlers();\n    }\n    initializeGame() {\n        this.createPlayers();\n        this.createFrisbee();\n        this.gameState.setState('currentScreen', 'menu');\n        this.startMenuLoop();\n    }\n    createPlayers() {\n        this.players = [];\n        // Team 1 (Red) - Human controlled\n        for(let i = 0; i < (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).TEAM_SIZE; i++)this.players.push({\n            id: `team1_${i}`,\n            team: 1,\n            number: i + 1,\n            x: 150 + i * 50,\n            y: 200 + i * 100,\n            velocityX: 0,\n            velocityY: 0,\n            size: (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE,\n            hasFrisbee: i === 0,\n            isAI: false,\n            isSelected: i === 0\n        });\n        // Team 2 (Blue) - AI controlled\n        for(let i = 0; i < (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).TEAM_SIZE; i++)this.players.push({\n            id: `team2_${i}`,\n            team: 2,\n            number: i + 1,\n            x: 650 - i * 50,\n            y: 200 + i * 100,\n            velocityX: 0,\n            velocityY: 0,\n            size: (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE,\n            hasFrisbee: false,\n            isAI: true,\n            isSelected: false\n        });\n    }\n    createFrisbee() {\n        this.frisbee = {\n            x: this.players[0].x,\n            y: this.players[0].y,\n            velocityX: 0,\n            velocityY: 0,\n            size: (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).FRISBEE_SIZE,\n            isFlying: false,\n            isVisible: false,\n            startX: 0,\n            startY: 0,\n            owner: this.players[0]\n        };\n    }\n    setupInputHandlers() {\n        this.input.on('keydown', (key)=>{\n            const state = this.gameState.getState('currentScreen');\n            if (key === 'Space') {\n                // Enable audio on first interaction\n                this.audio.enableAudioContext();\n                if (state === 'menu') this.startGame();\n                else if (state === 'game') this.pauseGame();\n                else if (state === 'pause') this.resumeGame();\n            }\n            if (key === 'KeyR') this.restartGame();\n            if (key === 'KeyM') this.goToMenu();\n            // Player selection with number keys (1, 2, 3)\n            if (key === 'Digit1') this.selectPlayer(1);\n            if (key === 'Digit2') this.selectPlayer(2);\n            if (key === 'Digit3') this.selectPlayer(3);\n        });\n        this.input.on('mousedown', (mouse)=>{\n            // Enable audio on first interaction\n            this.audio.enableAudioContext();\n            if (this.gameState.getState('currentScreen') === 'game') this.handleThrow(mouse.x, mouse.y);\n        });\n    }\n    startGame() {\n        this.stopGameLoop();\n        this.gameState.setState('currentScreen', 'game');\n        this.gameState.setState('gameTime', (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).GAME_DURATION);\n        try {\n            this.audio.onGameStart();\n        } catch (e) {\n            console.warn('Audio failed to start:', e);\n        }\n        this.startGameLoop();\n    }\n    pauseGame() {\n        this.gameState.setState('currentScreen', 'pause');\n        this.audio.onGamePause();\n        this.stopGameLoop();\n    }\n    resumeGame() {\n        this.gameState.setState('currentScreen', 'game');\n        this.audio.onGameResume();\n        this.startGameLoop();\n    }\n    restartGame() {\n        this.gameState.reset();\n        this.initializeGame();\n        this.startGame();\n    }\n    goToMenu() {\n        this.stopGameLoop();\n        this.gameState.reset();\n        this.initializeGame();\n    }\n    selectPlayer(playerNumber) {\n        // Only allow selecting team 1 (human) players\n        const targetPlayer = this.players.find((p)=>p.team === 1 && p.number === playerNumber);\n        if (targetPlayer) {\n            // Clear all selections\n            this.players.forEach((p)=>p.isSelected = false);\n            // Select the target player\n            targetPlayer.isSelected = true;\n            console.log(`Selected player ${playerNumber}`);\n        }\n    }\n    startGameLoop() {\n        this.stopGameLoop();\n        this.lastTime = performance.now();\n        this.gameLoop = requestAnimationFrame((time)=>this.update(time));\n    }\n    startMenuLoop() {\n        if (this.gameLoop) return;\n        this.gameLoop = requestAnimationFrame(()=>this.renderMenu());\n    }\n    renderMenu() {\n        this.render();\n        if (this.gameState.getState('currentScreen') === 'menu') this.gameLoop = requestAnimationFrame(()=>this.renderMenu());\n    }\n    stopGameLoop() {\n        if (this.gameLoop) {\n            cancelAnimationFrame(this.gameLoop);\n            this.gameLoop = null;\n        }\n    }\n    update(currentTime) {\n        const deltaTime = (currentTime - this.lastTime) / 1000;\n        this.lastTime = currentTime;\n        if (this.gameState.getState('currentScreen') === 'game') {\n            this.updateGame(deltaTime);\n            this.updateTimer(deltaTime);\n        }\n        this.render();\n        if (this.gameState.getState('currentScreen') === 'game') this.gameLoop = requestAnimationFrame((time)=>this.update(time));\n    }\n    updateGame(deltaTime) {\n        this.updatePlayerMovement(deltaTime);\n        this.updateFrisbee(deltaTime);\n        // this.ai.update(deltaTime, this.players, this.frisbee); // Disabled - AI handled in updatePlayerMovement\n        this.checkCollisions();\n        this.checkScoring();\n    }\n    updatePlayerMovement(deltaTime) {\n        const selectedPlayer = this.players.find((p)=>p.isSelected);\n        if (selectedPlayer && !selectedPlayer.isAI && !selectedPlayer.hasFrisbee) {\n            const movement = this.input.getMovementVector();\n            selectedPlayer.velocityX = movement.x * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n            selectedPlayer.velocityY = movement.y * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n        }\n        // Basic AI for inactive red team players\n        this.players.forEach((redPlayer)=>{\n            if (!redPlayer.isAI && !redPlayer.isSelected && !redPlayer.hasFrisbee) {\n                const humanWithFrisbee = this.players.find((p)=>p.team === 1 && p.hasFrisbee);\n                const aiWithFrisbee = this.players.find((p)=>p.team === 2 && p.hasFrisbee);\n                if (this.frisbee.isVisible && this.frisbee.isFlying) {\n                    // Chase flying frisbee\n                    const dx = this.frisbee.x - redPlayer.x;\n                    const dy = this.frisbee.y - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    if (distance > 10) {\n                        redPlayer.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.7;\n                        redPlayer.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.7;\n                    }\n                } else if (this.frisbee.isVisible && !this.frisbee.isFlying) {\n                    // Chase loose frisbee\n                    const dx = this.frisbee.x - redPlayer.x;\n                    const dy = this.frisbee.y - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    if (distance > 10) {\n                        redPlayer.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.8;\n                        redPlayer.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.8;\n                    }\n                } else if (aiWithFrisbee) {\n                    // Defensive: pressure ball carrier while maintaining spacing\n                    const teammates = this.players.filter((p)=>p.team === 1 && p !== redPlayer);\n                    let targetX = aiWithFrisbee.x;\n                    let targetY = aiWithFrisbee.y;\n                    // Avoid clustering with teammates on defense\n                    teammates.forEach((teammate)=>{\n                        const dx = redPlayer.x - teammate.x;\n                        const dy = redPlayer.y - teammate.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance < 60) {\n                            targetX += dx * 0.3;\n                            targetY += dy * 0.3;\n                        }\n                    });\n                    const dx = targetX - redPlayer.x;\n                    const dy = targetY - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    if (distance > 30) {\n                        redPlayer.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.7;\n                        redPlayer.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.7;\n                    } else {\n                        // Keep moving around the ball carrier\n                        redPlayer.velocityX = (Math.random() - 0.5) * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.4;\n                        redPlayer.velocityY = (Math.random() - 0.5) * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.4;\n                    }\n                } else if (humanWithFrisbee) {\n                    // Offensive: spread out and get open for passes\n                    const teammates = this.players.filter((p)=>p.team === 1 && p !== redPlayer);\n                    const opponents = this.players.filter((p)=>p.team === 2);\n                    let targetX = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH - 50; // Toward goal\n                    let targetY = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2 + (Math.random() - 0.5) * 120;\n                    // Spread out from teammates\n                    teammates.forEach((teammate)=>{\n                        const dx = redPlayer.x - teammate.x;\n                        const dy = redPlayer.y - teammate.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance < 70) {\n                            targetX += dx * 0.4;\n                            targetY += dy * 0.4;\n                        }\n                    });\n                    // Check if passing lane to frisbee holder is blocked\n                    const passingLaneBlocked = opponents.some((opponent)=>{\n                        const distToLine = this.distanceToLine(humanWithFrisbee.x, humanWithFrisbee.y, redPlayer.x, redPlayer.y, opponent.x, opponent.y);\n                        return distToLine < 25; // 25 pixel buffer for passing lane\n                    });\n                    if (passingLaneBlocked) {\n                        // Move perpendicular to the passing lane to get open\n                        const dx = redPlayer.x - humanWithFrisbee.x;\n                        const dy = redPlayer.y - humanWithFrisbee.y;\n                        const perpX = -dy; // Perpendicular direction\n                        const perpY = dx;\n                        const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n                        if (perpLength > 0) {\n                            targetX += perpX / perpLength * 60;\n                            targetY += perpY / perpLength * 60;\n                        }\n                    }\n                    // Also avoid being too close to defenders\n                    const nearestDefender = opponents.reduce((nearest, opponent)=>{\n                        const distance = Math.sqrt((opponent.x - redPlayer.x) ** 2 + (opponent.y - redPlayer.y) ** 2);\n                        return !nearest || distance < nearest.distance ? {\n                            player: opponent,\n                            distance: distance\n                        } : nearest;\n                    }, null);\n                    if (nearestDefender && nearestDefender.distance < 40) {\n                        const dx = redPlayer.x - nearestDefender.player.x;\n                        const dy = redPlayer.y - nearestDefender.player.y;\n                        targetX += dx * 0.6;\n                        targetY += dy * 0.6;\n                    }\n                    const dx = targetX - redPlayer.x;\n                    const dy = targetY - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    if (distance > 15) {\n                        redPlayer.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.6;\n                        redPlayer.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.6;\n                    } else {\n                        // Keep moving to stay open\n                        redPlayer.velocityX = (Math.random() - 0.5) * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.3;\n                        redPlayer.velocityY = (Math.random() - 0.5) * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.3;\n                    }\n                } else {\n                    redPlayer.velocityX = 0;\n                    redPlayer.velocityY = 0;\n                }\n            }\n        });\n        // Blue team AI behavior\n        this.players.forEach((player)=>{\n            if (player.isAI) {\n                if (player.hasFrisbee) {\n                    // AI with frisbee: throw to teammate or toward goal\n                    if (!player.aiThrowTimer) player.aiThrowTimer = 0;\n                    player.aiThrowTimer += deltaTime;\n                    if (player.aiThrowTimer > 1) {\n                        const teammates = this.players.filter((p)=>p.team === player.team && p !== player);\n                        const opponents = this.players.filter((p)=>p.team !== player.team);\n                        // Find best teammate with clear passing lane\n                        const bestTeammate = teammates.reduce((best, teammate)=>{\n                            const distance = Math.sqrt((teammate.x - player.x) ** 2 + (teammate.y - player.y) ** 2);\n                            // Check if passing lane is clear (no opponent too close to the line)\n                            const passingLaneClear = !opponents.some((opponent)=>{\n                                const distToLine = this.distanceToLine(player.x, player.y, teammate.x, teammate.y, opponent.x, opponent.y);\n                                return distToLine < 30; // 30 pixel buffer\n                            });\n                            if (!passingLaneClear) return best;\n                            return !best || distance < best.distance ? {\n                                player: teammate,\n                                distance: distance\n                            } : best;\n                        }, null);\n                        if (bestTeammate && bestTeammate.distance < 200) {\n                            // Throw to teammate with clear lane\n                            this.throwFrisbee(player, bestTeammate.player.x, bestTeammate.player.y);\n                            player.aiThrowTimer = 0;\n                        } else // No clear pass, check if teammate is near goal before throwing\n                        if (player.aiThrowTimer > 3) {\n                            const goalX = player.team === 2 ? 50 : (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH - 50;\n                            const goalY = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2;\n                            // Only throw toward goal if teammate is reasonably close to catch it\n                            const teammateNearGoal = teammates.some((teammate)=>{\n                                const distToGoal = Math.sqrt((teammate.x - goalX) ** 2 + (teammate.y - goalY) ** 2);\n                                return distToGoal < 80; // Teammate within 80 pixels of goal area\n                            });\n                            if (teammateNearGoal) {\n                                this.throwFrisbee(player, goalX, goalY);\n                                player.aiThrowTimer = 0;\n                            } else // No good option, reset timer and wait for better opportunity\n                            player.aiThrowTimer = 2; // Reset to 2 seconds to try again soon\n                        }\n                    }\n                } else {\n                    // AI without frisbee behavior\n                    const humanWithFrisbee = this.players.find((p)=>p.team === 1 && p.hasFrisbee);\n                    const aiWithFrisbee = this.players.find((p)=>p.team === 2 && p.hasFrisbee);\n                    if (this.frisbee.isVisible && this.frisbee.isFlying) {\n                        // Chase flying frisbee for interception\n                        const dx = this.frisbee.x - player.x;\n                        const dy = this.frisbee.y - player.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance > 10) {\n                            player.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n                            player.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n                        } else {\n                            player.velocityX = 0;\n                            player.velocityY = 0;\n                        }\n                    } else if (this.frisbee.isVisible && !this.frisbee.isFlying) {\n                        // Chase loose frisbee\n                        const dx = this.frisbee.x - player.x;\n                        const dy = this.frisbee.y - player.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance > 5) {\n                            player.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n                            player.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED;\n                        } else {\n                            player.velocityX = 0;\n                            player.velocityY = 0;\n                        }\n                    } else if (humanWithFrisbee) {\n                        // Defensive: position between assigned player and frisbee holder to block passes\n                        const humanPlayers = this.players.filter((p)=>p.team === 1);\n                        const aiPlayers = this.players.filter((p)=>p.team === 2);\n                        const aiIndex = aiPlayers.indexOf(player);\n                        const targetHuman = humanPlayers[aiIndex % humanPlayers.length];\n                        if (targetHuman && targetHuman !== humanWithFrisbee) {\n                            // Position between frisbee holder and assigned player\n                            const midX = (humanWithFrisbee.x + targetHuman.x) / 2;\n                            const midY = (humanWithFrisbee.y + targetHuman.y) / 2;\n                            const dx = midX - player.x;\n                            const dy = midY - player.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            if (distance > 20) {\n                                player.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.8;\n                                player.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.8;\n                            } else {\n                                player.velocityX = 0;\n                                player.velocityY = 0;\n                            }\n                        } else if (targetHuman === humanWithFrisbee) {\n                            // If assigned to player with frisbee, pressure them directly\n                            const dx = targetHuman.x - player.x;\n                            const dy = targetHuman.y - player.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            if (distance > 30) {\n                                player.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.9;\n                                player.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.9;\n                            } else {\n                                player.velocityX = 0;\n                                player.velocityY = 0;\n                            }\n                        }\n                    } else if (aiWithFrisbee) {\n                        // Offensive: spread out and avoid both defenders and teammates\n                        const opponents = this.players.filter((p)=>p.team !== player.team);\n                        const teammates = this.players.filter((p)=>p.team === player.team && p !== player);\n                        let targetX = 50; // Default toward goal\n                        let targetY = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT / 2 + (Math.random() - 0.5) * 150; // Add some randomness\n                        // Avoid clustering with teammates\n                        teammates.forEach((teammate)=>{\n                            const dx = player.x - teammate.x;\n                            const dy = player.y - teammate.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            if (distance < 80) {\n                                targetX += dx * 0.5;\n                                targetY += dy * 0.5;\n                            }\n                        });\n                        // Check if passing lane to teammate with frisbee is blocked\n                        const passingLaneBlocked = opponents.some((opponent)=>{\n                            const distToLine = this.distanceToLine(aiWithFrisbee.x, aiWithFrisbee.y, player.x, player.y, opponent.x, opponent.y);\n                            return distToLine < 25; // 25 pixel buffer for passing lane\n                        });\n                        if (passingLaneBlocked) {\n                            // Move perpendicular to the passing lane to get open\n                            const dx = player.x - aiWithFrisbee.x;\n                            const dy = player.y - aiWithFrisbee.y;\n                            const perpX = -dy; // Perpendicular direction\n                            const perpY = dx;\n                            const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n                            if (perpLength > 0) {\n                                targetX += perpX / perpLength * 50;\n                                targetY += perpY / perpLength * 50;\n                            }\n                        }\n                        // Avoid defenders\n                        opponents.forEach((opponent)=>{\n                            const dx = player.x - opponent.x;\n                            const dy = player.y - opponent.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            if (distance < 60) {\n                                targetX += dx * 0.4;\n                                targetY += dy * 0.4;\n                            }\n                        });\n                        const dx = targetX - player.x;\n                        const dy = targetY - player.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance > 15) {\n                            player.velocityX = dx / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.7;\n                            player.velocityY = dy / distance * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.7;\n                        } else {\n                            // Keep moving even when close to target\n                            player.velocityX = (Math.random() - 0.5) * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.3;\n                            player.velocityY = (Math.random() - 0.5) * (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SPEED * 0.3;\n                        }\n                    } else {\n                        // No specific target, stay relatively still\n                        player.velocityX = 0;\n                        player.velocityY = 0;\n                    }\n                }\n            }\n            // Update throw timer for players with frisbee\n            if (player.hasFrisbee) {\n                if (!player.throwTimer) player.throwTimer = 0;\n                player.throwTimer += deltaTime;\n                // Force drop after 5 seconds\n                if (player.throwTimer > 5) this.dropFrisbee(player);\n            }\n            this.physics.updatePosition(player, deltaTime);\n        });\n    }\n    updateFrisbee(deltaTime) {\n        if (this.frisbee.isFlying) {\n            const distance = Math.sqrt((this.frisbee.targetX - this.frisbee.startX) ** 2 + (this.frisbee.targetY - this.frisbee.startY) ** 2);\n            const speed = 400; // pixels per second\n            const progressIncrement = deltaTime * speed / distance;\n            this.frisbee.flightProgress += progressIncrement;\n            if (this.frisbee.flightProgress >= 1) {\n                // Reached destination\n                this.frisbee.x = this.frisbee.targetX;\n                this.frisbee.y = this.frisbee.targetY;\n                this.frisbee.isFlying = false;\n                this.frisbee.flightProgress = 1;\n            } else {\n                // Interpolate position\n                const t = this.frisbee.flightProgress;\n                this.frisbee.x = this.frisbee.startX + (this.frisbee.targetX - this.frisbee.startX) * t;\n                this.frisbee.y = this.frisbee.startY + (this.frisbee.targetY - this.frisbee.startY) * t;\n            }\n        }\n    }\n    updateTimer(deltaTime) {\n        const currentTime = this.gameState.getState('gameTime');\n        const newTime = Math.max(0, currentTime - deltaTime);\n        this.gameState.setState('gameTime', newTime);\n        if (newTime <= 0) this.endGame();\n    }\n    handleThrow(targetX, targetY) {\n        const thrower = this.players.find((p)=>p.hasFrisbee);\n        console.log('Throw attempt - thrower:', !!thrower, 'flying:', this.frisbee.isFlying);\n        if (!thrower) return;\n        // Check if clicking on a team 1 player (teammate)\n        const clickedPlayer = this.players.find((p)=>p.team === 1 && p !== thrower && Math.abs(p.x - targetX) < (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE && Math.abs(p.y - targetY) < (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE);\n        if (clickedPlayer) this.throwFrisbee(thrower, clickedPlayer.x, clickedPlayer.y);\n        else this.throwFrisbee(thrower, targetX, targetY);\n    }\n    throwFrisbee(thrower, targetX, targetY) {\n        console.log('THROWING - from:', thrower.x, thrower.y, 'to:', targetX, targetY);\n        this.frisbee.x = thrower.x;\n        this.frisbee.y = thrower.y;\n        this.frisbee.targetX = targetX;\n        this.frisbee.targetY = targetY;\n        this.frisbee.startX = thrower.x;\n        this.frisbee.startY = thrower.y;\n        this.frisbee.flightProgress = 0;\n        this.frisbee.isFlying = true;\n        this.frisbee.isVisible = true;\n        this.frisbee.throwTime = performance.now();\n        this.frisbee.throwerTeam = thrower.team; // Track who threw it\n        thrower.hasFrisbee = false;\n        thrower.throwTimer = 0; // Reset throw timer\n        console.log('Frisbee state after throw:', {\n            x: this.frisbee.x,\n            y: this.frisbee.y,\n            isFlying: this.frisbee.isFlying,\n            isVisible: this.frisbee.isVisible,\n            throwerTeam: this.frisbee.throwerTeam\n        });\n        try {\n            this.audio.onThrow();\n        } catch (e) {}\n    }\n    dropFrisbee(player) {\n        // Player drops frisbee at their location\n        this.frisbee.x = player.x;\n        this.frisbee.y = player.y;\n        this.frisbee.isFlying = false;\n        this.frisbee.isVisible = true;\n        this.frisbee.throwerTeam = player.team; // Mark as dropped by this team\n        player.hasFrisbee = false;\n        player.throwTimer = 0;\n        console.log('Player', player.team, 'dropped frisbee due to 5-second rule');\n    }\n    checkCollisions() {\n        // Check collisions for both flying and grounded frisbee\n        if (!this.frisbee.isVisible) return;\n        // If flying, only check collisions after minimum time delay (100ms) to avoid immediate catching\n        if (this.frisbee.isFlying && performance.now() - this.frisbee.throwTime < 100) return;\n        this.players.forEach((player)=>{\n            // Use larger catch radius for teammates, smaller for opponents\n            const isTeammate = this.frisbee.throwerTeam === player.team;\n            const catchRadius = isTeammate ? (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE * 0.8 : (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).PLAYER_SIZE * 0.5;\n            const dx = player.x - this.frisbee.x;\n            const dy = player.y - this.frisbee.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (distance < catchRadius) {\n                // If frisbee is on ground, only opposing team can pick it up\n                if (!this.frisbee.isFlying && this.frisbee.throwerTeam === player.team) return; // Same team can't pick up their own grounded throw\n                this.catchFrisbee(player);\n            }\n        });\n    }\n    catchFrisbee(player) {\n        // Clear any existing frisbee holder\n        this.players.forEach((p)=>p.hasFrisbee = false);\n        this.frisbee.isFlying = false;\n        this.frisbee.isVisible = false;\n        this.frisbee.x = player.x;\n        this.frisbee.y = player.y;\n        this.frisbee.velocityX = 0;\n        this.frisbee.velocityY = 0;\n        player.hasFrisbee = true;\n        this.audio.onCatch();\n        // Switch selected player if caught by human team\n        if (player.team === 1) {\n            this.players.forEach((p)=>p.isSelected = false);\n            player.isSelected = true;\n        }\n    }\n    checkScoring() {\n        const playerWithFrisbee = this.players.find((p)=>p.hasFrisbee);\n        if (!playerWithFrisbee) return;\n        const inEndZone = playerWithFrisbee.team === 1 && playerWithFrisbee.x > (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH - (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH || playerWithFrisbee.team === 2 && playerWithFrisbee.x < (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).END_ZONE_WIDTH;\n        if (inEndZone) this.score(playerWithFrisbee.team);\n    }\n    score(team) {\n        const currentScore = this.gameState.getState('score');\n        if (team === 1) currentScore.team1++;\n        else currentScore.team2++;\n        this.gameState.setState('score', currentScore);\n        this.audio.onScore();\n        // Reset positions\n        this.resetPositions();\n        // Check for game end\n        if (currentScore.team1 >= (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).SCORE_TO_WIN || currentScore.team2 >= (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).SCORE_TO_WIN) this.endGame();\n    }\n    resetPositions() {\n        this.createPlayers();\n        this.createFrisbee();\n    }\n    endGame() {\n        this.gameState.setState('currentScreen', 'gameOver');\n        this.audio.onGameEnd();\n        this.stopGameLoop();\n    }\n    distanceToLine(x1, y1, x2, y2, px, py) {\n        // Calculate distance from point (px, py) to line segment (x1,y1)-(x2,y2)\n        const A = px - x1;\n        const B = py - y1;\n        const C = x2 - x1;\n        const D = y2 - y1;\n        const dot = A * C + B * D;\n        const lenSq = C * C + D * D;\n        if (lenSq === 0) return Math.sqrt(A * A + B * B);\n        const param = dot / lenSq;\n        let xx, yy;\n        if (param < 0) {\n            xx = x1;\n            yy = y1;\n        } else if (param > 1) {\n            xx = x2;\n            yy = y2;\n        } else {\n            xx = x1 + param * C;\n            yy = y1 + param * D;\n        }\n        const dx = px - xx;\n        const dy = py - yy;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    render() {\n        const currentScreen = this.gameState.getState('currentScreen');\n        // console.log('Rendering screen:', currentScreen);\n        if (currentScreen === 'menu') this.renderer.drawMenu();\n        else {\n            this.renderer.clear();\n            this.renderer.drawField();\n            // console.log('Drawing', this.players.length, 'players');\n            this.players.forEach((player, index)=>{\n                // console.log(`Drawing player ${index}, team ${player.team}, position (${player.x}, ${player.y})`);\n                this.renderer.drawPlayer(player);\n            });\n            this.renderer.drawFrisbee(this.frisbee);\n            this.renderer.drawUI(this.gameState);\n        }\n    }\n}\n\n\n\n/**\n * Main application entry point\n */ class $2b6e161c9edcf319$export$ef679666f51623ae {\n    constructor(){\n        this.canvas = null;\n        this.gameController = null;\n        this.localStorage = new (0, $a8a4f6cc120ddce7$export$19fffca37ef3e106)();\n    }\n    async initialize() {\n        try {\n            // Create canvas\n            this.createCanvas();\n            // Initialize core systems\n            const assetLoader = new (0, $255649eb9271def6$export$356f5f2a609e254f)();\n            const gameState = new (0, $3d7acf461522ca86$export$eb5ccdbd077479c)();\n            // Load saved settings\n            this.loadSettings(gameState);\n            // Initialize game systems\n            const physicsEngine = new (0, $7d305a1ba637179b$export$69b1b1c72d4bbb9d)();\n            const aiController = new (0, $424d233ae2a12642$export$badae6bab0f3493e)(gameState);\n            const audioManager = new (0, $1cc9a11145b9c8d6$export$557a8016f4e0c1ba)(assetLoader);\n            const renderer = new (0, $3c41843540f07017$export$7adc20298958481a)(this.canvas, assetLoader);\n            const inputHandler = new (0, $e34a11d940d9f889$export$2c7a04567169355e)(this.canvas);\n            // Load sprites asynchronously\n            this.loadSpritesSync(assetLoader);\n            // Initialize audio\n            await audioManager.initialize();\n            // Create game controller AFTER sprites are loaded\n            this.gameController = new (0, $196999ef1341334b$export$f3f3f6c0124f08de)(gameState, physicsEngine, aiController, audioManager, renderer, inputHandler);\n            console.log('Ultimate Frisbee Game initialized successfully!');\n        } catch (error) {\n            console.error('Failed to initialize game:', error);\n            this.showError('Failed to load game. Please refresh the page.');\n        }\n    }\n    createCanvas() {\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_WIDTH;\n        this.canvas.height = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).CANVAS_HEIGHT;\n        this.canvas.style.border = '2px solid #333';\n        this.canvas.style.background = (0, $bebe1cbb5a309c8c$export$1630b5343357e8b5).COLORS.FIELD;\n        const app = document.getElementById('app');\n        if (app) app.appendChild(this.canvas);\n        else document.body.appendChild(this.canvas);\n    }\n    loadSettings(gameState) {\n        const settings = this.localStorage.load('gameSettings', {\n            difficulty: 'medium',\n            soundEnabled: true,\n            musicEnabled: true\n        });\n        gameState.setState('gameSettings', settings);\n    }\n    saveSettings(gameState) {\n        const settings = gameState.getState('gameSettings');\n        this.localStorage.save('gameSettings', settings);\n    }\n    loadSpritesSync(assetLoader) {\n        console.log('Loading sprites asynchronously...');\n        // Create images and load them without blocking\n        const redImg = new Image();\n        const blueImg = new Image();\n        const frisbeeImg = new Image();\n        redImg.onload = ()=>{\n            assetLoader.assets.set('player-team1', redImg);\n            console.log('Red sprite loaded');\n        };\n        blueImg.onload = ()=>{\n            assetLoader.assets.set('player-team2', blueImg);\n            console.log('Blue sprite loaded');\n        };\n        frisbeeImg.onload = ()=>{\n            assetLoader.assets.set('frisbee', frisbeeImg);\n            console.log('Frisbee sprite loaded');\n        };\n        // Set sources to start loading\n        redImg.src = './player-red.png';\n        blueImg.src = './player-blue.png';\n        frisbeeImg.src = './frisbee.png';\n        console.log('Sprite loading initiated, game will continue...');\n    }\n    showError(message) {\n        const errorDiv = document.createElement('div');\n        errorDiv.style.cssText = `\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background: #ff4444;\n            color: white;\n            padding: 20px;\n            border-radius: 5px;\n            font-family: monospace;\n            text-align: center;\n            z-index: 1000;\n        `;\n        errorDiv.textContent = message;\n        document.body.appendChild(errorDiv);\n    }\n}\n// Initialize game when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', async ()=>{\n    const game = new $2b6e161c9edcf319$export$ef679666f51623ae();\n    await game.initialize();\n});\n// Handle page visibility changes\ndocument.addEventListener('visibilitychange', ()=>{\n    if (document.hidden) // Pause game when tab is not visible\n    console.log('Game paused due to tab visibility');\n});\n// Handle window resize\nwindow.addEventListener('resize', ()=>{\n// Could implement responsive canvas sizing here if needed\n});\n\n\n//# sourceMappingURL=UltimateFrisbeeArcadeGame.f55f99df.js.map\n","import { LocalStorage } from './core/local-storage.js';\nimport { AssetLoader } from './core/asset-loader.js';\nimport { GameState } from './core/game-state.js';\nimport { PhysicsEngine } from './logic/physics-engine.js';\nimport { AIController } from './logic/ai-controller.js';\nimport { AudioManager } from './logic/audio-manager.js';\nimport { CanvasRenderer } from './presentation/canvas-renderer.js';\nimport { InputHandler } from './presentation/input-handler.js';\nimport { GameController } from './controllers/game-controller.js';\nimport { CONFIG } from './config.js';\n\n/**\n * Main application entry point\n */\nclass UltimateFrisbeeGame {\n    constructor() {\n        this.canvas = null;\n        this.gameController = null;\n        this.localStorage = new LocalStorage();\n    }\n\n    async initialize() {\n        try {\n            // Create canvas\n            this.createCanvas();\n            \n            // Initialize core systems\n            const assetLoader = new AssetLoader();\n            const gameState = new GameState();\n            \n            // Load saved settings\n            this.loadSettings(gameState);\n            \n            // Initialize game systems\n            const physicsEngine = new PhysicsEngine();\n            const aiController = new AIController(gameState);\n            const audioManager = new AudioManager(assetLoader);\n            const renderer = new CanvasRenderer(this.canvas, assetLoader);\n            const inputHandler = new InputHandler(this.canvas);\n            \n            // Load sprites asynchronously\n            this.loadSpritesSync(assetLoader);\n            \n            // Initialize audio\n            await audioManager.initialize();\n            \n            // Create game controller AFTER sprites are loaded\n            this.gameController = new GameController(\n                gameState,\n                physicsEngine,\n                aiController,\n                audioManager,\n                renderer,\n                inputHandler\n            );\n            \n            console.log('Ultimate Frisbee Game initialized successfully!');\n            \n        } catch (error) {\n            console.error('Failed to initialize game:', error);\n            this.showError('Failed to load game. Please refresh the page.');\n        }\n    }\n\n    createCanvas() {\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = CONFIG.CANVAS_WIDTH;\n        this.canvas.height = CONFIG.CANVAS_HEIGHT;\n        this.canvas.style.border = '2px solid #333';\n        this.canvas.style.background = CONFIG.COLORS.FIELD;\n        \n        const app = document.getElementById('app');\n        if (app) {\n            app.appendChild(this.canvas);\n        } else {\n            document.body.appendChild(this.canvas);\n        }\n    }\n\n\n\n    loadSettings(gameState) {\n        const settings = this.localStorage.load('gameSettings', {\n            difficulty: 'medium',\n            soundEnabled: true,\n            musicEnabled: true\n        });\n        \n        gameState.setState('gameSettings', settings);\n    }\n\n    saveSettings(gameState) {\n        const settings = gameState.getState('gameSettings');\n        this.localStorage.save('gameSettings', settings);\n    }\n\n    loadSpritesSync(assetLoader) {\n        console.log('Loading sprites asynchronously...');\n        \n        // Create images and load them without blocking\n        const redImg = new Image();\n        const blueImg = new Image();\n        const frisbeeImg = new Image();\n        \n        redImg.onload = () => {\n            assetLoader.assets.set('player-team1', redImg);\n            console.log('Red sprite loaded');\n        };\n        \n        blueImg.onload = () => {\n            assetLoader.assets.set('player-team2', blueImg);\n            console.log('Blue sprite loaded');\n        };\n        \n        frisbeeImg.onload = () => {\n            assetLoader.assets.set('frisbee', frisbeeImg);\n            console.log('Frisbee sprite loaded');\n        };\n        \n        // Set sources to start loading\n        redImg.src = './player-red.png';\n        blueImg.src = './player-blue.png';\n        frisbeeImg.src = './frisbee.png';\n        \n        console.log('Sprite loading initiated, game will continue...');\n    }\n\n    showError(message) {\n        const errorDiv = document.createElement('div');\n        errorDiv.style.cssText = `\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background: #ff4444;\n            color: white;\n            padding: 20px;\n            border-radius: 5px;\n            font-family: monospace;\n            text-align: center;\n            z-index: 1000;\n        `;\n        errorDiv.textContent = message;\n        document.body.appendChild(errorDiv);\n    }\n}\n\n// Initialize game when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', async () => {\n    const game = new UltimateFrisbeeGame();\n    await game.initialize();\n});\n\n// Handle page visibility changes\ndocument.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n        // Pause game when tab is not visible\n        console.log('Game paused due to tab visibility');\n    }\n});\n\n// Handle window resize\nwindow.addEventListener('resize', () => {\n    // Could implement responsive canvas sizing here if needed\n});\n\nexport { UltimateFrisbeeGame };","/**\n * Local Storage utility for game data persistence\n */\nexport class LocalStorage {\n    constructor() {\n        this.prefix = 'ultimate-frisbee-';\n    }\n\n    save(key, data) {\n        try {\n            const serialized = JSON.stringify(data);\n            localStorage.setItem(this.prefix + key, serialized);\n            return true;\n        } catch (error) {\n            console.error('Failed to save to localStorage:', error);\n            return false;\n        }\n    }\n\n    load(key, defaultValue = null) {\n        try {\n            const item = localStorage.getItem(this.prefix + key);\n            return item ? JSON.parse(item) : defaultValue;\n        } catch (error) {\n            console.error('Failed to load from localStorage:', error);\n            return defaultValue;\n        }\n    }\n\n    remove(key) {\n        try {\n            localStorage.removeItem(this.prefix + key);\n            return true;\n        } catch (error) {\n            console.error('Failed to remove from localStorage:', error);\n            return false;\n        }\n    }\n\n    clear() {\n        try {\n            const keys = Object.keys(localStorage);\n            keys.forEach(key => {\n                if (key.startsWith(this.prefix)) {\n                    localStorage.removeItem(key);\n                }\n            });\n            return true;\n        } catch (error) {\n            console.error('Failed to clear localStorage:', error);\n            return false;\n        }\n    }\n}","/**\n * Asset Loader for sprites and audio files\n */\nexport class AssetLoader {\n    constructor() {\n        this.assets = new Map();\n        this.loadPromises = new Map();\n    }\n\n    async loadImage(name, path) {\n        if (this.assets.has(name)) {\n            console.log(`Asset ${name} already loaded`);\n            return this.assets.get(name);\n        }\n\n        if (this.loadPromises.has(name)) {\n            return this.loadPromises.get(name);\n        }\n\n        console.log(`Loading image: ${name} from ${path}`);\n        const promise = new Promise((resolve, reject) => {\n            const img = new Image();\n            img.onload = () => {\n                console.log(`Successfully loaded image: ${name}`);\n                this.assets.set(name, img);\n                this.loadPromises.delete(name);\n                resolve(img);\n            };\n            img.onerror = (error) => {\n                console.error(`Failed to load image: ${name} from ${path}`, error);\n                this.loadPromises.delete(name);\n                reject(new Error(`Failed to load image: ${path}`));\n            };\n            img.src = path;\n        });\n\n        this.loadPromises.set(name, promise);\n        return promise;\n    }\n\n    async loadAudio(name, path) {\n        if (this.assets.has(name)) {\n            return this.assets.get(name);\n        }\n\n        if (this.loadPromises.has(name)) {\n            return this.loadPromises.get(name);\n        }\n\n        const promise = new Promise((resolve, reject) => {\n            const audio = new Audio();\n            audio.oncanplaythrough = () => {\n                this.assets.set(name, audio);\n                this.loadPromises.delete(name);\n                resolve(audio);\n            };\n            audio.onerror = () => {\n                this.loadPromises.delete(name);\n                reject(new Error(`Failed to load audio: ${path}`));\n            };\n            audio.src = path;\n        });\n\n        this.loadPromises.set(name, promise);\n        return promise;\n    }\n\n    async loadAssets(assetList) {\n        console.log('Loading assets:', assetList);\n        const promises = assetList.map(asset => {\n            if (asset.type === 'image') {\n                return this.loadImage(asset.name, asset.path);\n            } else if (asset.type === 'audio') {\n                return this.loadAudio(asset.name, asset.path);\n            }\n        });\n\n        const results = await Promise.all(promises);\n        console.log('Assets loaded:', this.assets);\n        return results;\n    }\n\n    getAsset(name) {\n        return this.assets.get(name);\n    }\n\n    hasAsset(name) {\n        return this.assets.has(name);\n    }\n}","/**\n * Central Game State Management\n */\nexport class GameState {\n    constructor() {\n        this.state = {\n            currentScreen: 'menu', // menu, game, pause, gameOver\n            score: { team1: 0, team2: 0 },\n            gameTime: 180, // 3 minutes in seconds\n            players: [],\n            frisbee: null,\n            field: null,\n            gameSettings: {\n                difficulty: 'medium',\n                soundEnabled: true,\n                musicEnabled: true\n            }\n        };\n        this.listeners = new Map();\n    }\n\n    setState(key, value) {\n        const oldValue = this.state[key];\n        this.state[key] = value;\n        this.notifyListeners(key, value, oldValue);\n    }\n\n    getState(key) {\n        return key ? this.state[key] : this.state;\n    }\n\n    updateState(updates) {\n        Object.keys(updates).forEach(key => {\n            this.setState(key, updates[key]);\n        });\n    }\n\n    subscribe(key, callback) {\n        if (!this.listeners.has(key)) {\n            this.listeners.set(key, []);\n        }\n        this.listeners.get(key).push(callback);\n        \n        return () => {\n            const callbacks = this.listeners.get(key);\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        };\n    }\n\n    notifyListeners(key, newValue, oldValue) {\n        const callbacks = this.listeners.get(key);\n        if (callbacks) {\n            callbacks.forEach(callback => {\n                try {\n                    callback(newValue, oldValue);\n                } catch (error) {\n                    console.error('Error in state listener:', error);\n                }\n            });\n        }\n    }\n\n    reset() {\n        this.setState('score', { team1: 0, team2: 0 });\n        this.setState('gameTime', 180);\n        this.setState('currentScreen', 'menu');\n    }\n}","import { CONFIG } from '../config.js';\n\n/**\n * Physics Engine for game mechanics\n */\nexport class PhysicsEngine {\n    constructor() {\n        this.gravity = 0;\n        this.friction = CONFIG.FRICTION;\n    }\n\n    updatePosition(entity, deltaTime) {\n        entity.x += entity.velocityX * deltaTime;\n        entity.y += entity.velocityY * deltaTime;\n        \n        // Apply friction\n        entity.velocityX *= this.friction;\n        entity.velocityY *= this.friction;\n        \n        // Boundary checking\n        this.checkBoundaries(entity);\n    }\n\n    checkBoundaries(entity) {\n        const halfSize = entity.size / 2;\n        \n        if (entity.x - halfSize < 0) {\n            entity.x = halfSize;\n            entity.velocityX = 0;\n        }\n        if (entity.x + halfSize > CONFIG.CANVAS_WIDTH) {\n            entity.x = CONFIG.CANVAS_WIDTH - halfSize;\n            entity.velocityX = 0;\n        }\n        if (entity.y - halfSize < 0) {\n            entity.y = halfSize;\n            entity.velocityY = 0;\n        }\n        if (entity.y + halfSize > CONFIG.CANVAS_HEIGHT) {\n            entity.y = CONFIG.CANVAS_HEIGHT - halfSize;\n            entity.velocityY = 0;\n        }\n    }\n\n    checkCollision(entity1, entity2) {\n        const dx = entity1.x - entity2.x;\n        const dy = entity1.y - entity2.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const minDistance = (entity1.size + entity2.size) / 2;\n        \n        return distance < minDistance;\n    }\n\n    resolveCollision(entity1, entity2) {\n        const dx = entity1.x - entity2.x;\n        const dy = entity1.y - entity2.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance === 0) return;\n        \n        const overlap = (entity1.size + entity2.size) / 2 - distance;\n        const separationX = (dx / distance) * overlap * 0.5;\n        const separationY = (dy / distance) * overlap * 0.5;\n        \n        entity1.x += separationX;\n        entity1.y += separationY;\n        entity2.x -= separationX;\n        entity2.y -= separationY;\n    }\n\n    calculateThrowVector(fromX, fromY, toX, toY, power) {\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance === 0) return { x: 0, y: 0 };\n        \n        const normalizedX = dx / distance;\n        const normalizedY = dy / distance;\n        \n        return {\n            x: normalizedX * power,\n            y: normalizedY * power\n        };\n    }\n}","/**\n * Game Configuration\n */\nexport const CONFIG = {\n    // Canvas settings\n    CANVAS_WIDTH: 800,\n    CANVAS_HEIGHT: 600,\n    TARGET_FPS: 60,\n\n    // Field dimensions\n    FIELD_WIDTH: 700,\n    FIELD_HEIGHT: 500,\n    END_ZONE_WIDTH: 100,\n\n    // Player settings\n    PLAYER_SIZE: 16,\n    PLAYER_SPEED: 120, // pixels per second\n    TEAM_SIZE: 3,\n\n    // Frisbee settings\n    FRISBEE_SIZE: 8,\n    FRISBEE_SPEED: 200,\n    THROW_POWER_MAX: 300,\n\n    // Game settings\n    GAME_DURATION: 180, // 3 minutes\n    SCORE_TO_WIN: 7,\n\n    // Physics\n    FRICTION: 0.95,\n    COLLISION_DISTANCE: 20,\n\n    // Colors (8-bit palette)\n    COLORS: {\n        FIELD: '#2a5d31',\n        END_ZONE: '#1a4d21',\n        FIELD_LINES: '#ffffff',\n        TEAM1: '#ff4444',\n        TEAM2: '#4444ff',\n        FRISBEE: '#ffff44',\n        UI_TEXT: '#ffffff',\n        UI_BACKGROUND: '#000000'\n    },\n\n    // Asset paths\n    ASSETS: {\n        SPRITES: {\n            PLAYER_TEAM1: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/player-red.png',\n            PLAYER_TEAM2: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/player-blue.png',\n            FRISBEE: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/frisbee.png',\n            FIELD_MARKER: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/sprites/field-marker.png'\n        },\n        AUDIO: {\n            THROW: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/throw.mp3',\n            CATCH: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/catch.mp3',\n            SCORE: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/score.mp3',\n            WHISTLE: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/whistle.mp3',\n            BACKGROUND_MUSIC: '/Users/sitzeti/Documents/Projects/UltimateFrisbeeArcadeGame/assets/audio/background.mp3'\n        }\n    }\n};","import { CONFIG } from '../config.js';\n\n/**\n * AI Controller for computer opponents\n */\nexport class AIController {\n    constructor(gameState) {\n        this.gameState = gameState;\n        this.difficulty = 'medium';\n        this.reactionTime = 0.5; // seconds\n        this.lastDecision = 0;\n    }\n\n    update(deltaTime, players, frisbee) {\n        this.lastDecision += deltaTime;\n        \n        if (this.lastDecision < this.reactionTime) return;\n        \n        const aiPlayers = players.filter(p => p.isAI);\n        \n        aiPlayers.forEach(player => {\n            this.updatePlayerAI(player, frisbee, players, deltaTime);\n        });\n        \n        this.lastDecision = 0;\n    }\n\n    updatePlayerAI(player, frisbee, allPlayers, deltaTime) {\n        if (player.hasFrisbee) {\n            this.handleOffensiveAI(player, frisbee, allPlayers);\n        } else {\n            this.handleDefensiveAI(player, frisbee, allPlayers);\n        }\n    }\n\n    handleOffensiveAI(player, frisbee, allPlayers) {\n        const teammates = allPlayers.filter(p => p.team === player.team && p !== player);\n        const opponents = allPlayers.filter(p => p.team !== player.team);\n        \n        // Find best teammate to throw to\n        let bestTarget = null;\n        let bestScore = -1;\n        \n        teammates.forEach(teammate => {\n            const score = this.evaluateThrowTarget(player, teammate, opponents);\n            if (score > bestScore) {\n                bestScore = score;\n                bestTarget = teammate;\n            }\n        });\n        \n        if (bestTarget && bestScore > 0.3) {\n            this.throwToTarget(player, bestTarget, frisbee);\n        }\n    }\n\n    handleDefensiveAI(player, frisbee, allPlayers) {\n        const opponents = allPlayers.filter(p => p.team !== player.team);\n        \n        if (frisbee.isFlying) {\n            // Try to intercept frisbee\n            this.moveTowards(player, frisbee.x, frisbee.y);\n        } else {\n            // Mark nearest opponent\n            const nearestOpponent = this.findNearestOpponent(player, opponents);\n            if (nearestOpponent) {\n                this.markOpponent(player, nearestOpponent);\n            }\n        }\n    }\n\n    evaluateThrowTarget(thrower, target, opponents) {\n        const distance = this.getDistance(thrower, target);\n        const distanceScore = Math.max(0, 1 - distance / 200);\n        \n        // Check if target is open\n        const nearestDefender = this.findNearestOpponent(target, opponents);\n        const openScore = nearestDefender ? \n            Math.max(0, this.getDistance(target, nearestDefender) / 50 - 1) : 1;\n        \n        // Prefer forward progress\n        const progressScore = target.y < thrower.y ? 0.5 : 0;\n        \n        return (distanceScore + openScore + progressScore) / 3;\n    }\n\n    throwToTarget(player, target, frisbee) {\n        const power = Math.min(CONFIG.THROW_POWER_MAX, this.getDistance(player, target) * 2);\n        \n        // Lead the target slightly\n        const leadX = target.velocityX * 0.3;\n        const leadY = target.velocityY * 0.3;\n        \n        frisbee.throw(player.x, player.y, target.x + leadX, target.y + leadY, power);\n        player.hasFrisbee = false;\n    }\n\n    moveTowards(player, targetX, targetY) {\n        const dx = targetX - player.x;\n        const dy = targetY - player.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 5) {\n            player.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED;\n            player.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED;\n        }\n    }\n\n    markOpponent(player, opponent) {\n        const idealDistance = 30;\n        const dx = opponent.x - player.x;\n        const dy = opponent.y - player.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > idealDistance + 10) {\n            this.moveTowards(player, opponent.x, opponent.y);\n        } else if (distance < idealDistance - 10) {\n            this.moveTowards(player, player.x - dx * 0.1, player.y - dy * 0.1);\n        }\n    }\n\n    findNearestOpponent(player, opponents) {\n        let nearest = null;\n        let minDistance = Infinity;\n        \n        opponents.forEach(opponent => {\n            const distance = this.getDistance(player, opponent);\n            if (distance < minDistance) {\n                minDistance = distance;\n                nearest = opponent;\n            }\n        });\n        \n        return nearest;\n    }\n\n    getDistance(entity1, entity2) {\n        const dx = entity1.x - entity2.x;\n        const dy = entity1.y - entity2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    setDifficulty(difficulty) {\n        this.difficulty = difficulty;\n        switch (difficulty) {\n            case 'easy':\n                this.reactionTime = 1.0;\n                break;\n            case 'medium':\n                this.reactionTime = 0.5;\n                break;\n            case 'hard':\n                this.reactionTime = 0.2;\n                break;\n        }\n    }\n}","/**\n * Audio Manager for sound effects and music\n */\nexport class AudioManager {\n    constructor(assetLoader) {\n        this.assetLoader = assetLoader;\n        this.sounds = new Map();\n        this.music = null;\n        this.soundEnabled = true;\n        this.musicEnabled = true;\n        this.masterVolume = 1.0;\n        this.soundVolume = 0.7;\n        this.musicVolume = 0.3;\n    }\n\n    async initialize() {\n        // Initialize Web Audio API for programmatic sounds\n        try {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            // Try to load background music file\n            await this.loadBackgroundMusic();\n        } catch (error) {\n            console.warn('Web Audio API not supported', error);\n            this.audioContext = null;\n        }\n    }\n    \n    async loadBackgroundMusic() {\n        console.log('🎵 Checking browser permissions and loading music...');\n        console.log('Location:', window.location.href);\n        console.log('Protocol:', window.location.protocol);\n        \n        // Check if running from file:// protocol\n        if (window.location.protocol === 'file:') {\n            console.warn('⚠️ Running from file:// protocol - audio may not load');\n            console.log('💡 Try running from http://localhost instead');\n        }\n        \n        try {\n            console.log('🔍 Trying MP3 file...');\n            this.music = new Audio('assets/audio/background-music.mp3');\n            this.music.loop = true;\n            this.music.volume = this.masterVolume * this.musicVolume;\n            \n            // Add detailed error logging\n            this.music.addEventListener('error', (e) => {\n                console.error('❌ MP3 Error details:', {\n                    error: e.target.error,\n                    networkState: e.target.networkState,\n                    readyState: e.target.readyState,\n                    src: e.target.src\n                });\n            });\n            \n            await new Promise((resolve, reject) => {\n                const timeout = setTimeout(() => {\n                    reject(new Error('MP3 load timeout'));\n                }, 3000);\n                \n                this.music.addEventListener('canplaythrough', () => {\n                    clearTimeout(timeout);\n                    resolve();\n                }, { once: true });\n                \n                this.music.addEventListener('error', (e) => {\n                    clearTimeout(timeout);\n                    reject(e);\n                }, { once: true });\n                \n                this.music.load();\n            });\n            \n            console.log('✅ MP3 background music loaded successfully');\n            \n        } catch (error) {\n            console.warn('❌ MP3 failed, trying WAV:', error.message);\n            \n            try {\n                console.log('🔍 Trying WAV file...');\n                this.music = new Audio('assets/audio/background-music.wav');\n                this.music.loop = true;\n                this.music.volume = this.masterVolume * this.musicVolume;\n                \n                this.music.addEventListener('error', (e) => {\n                    console.error('❌ WAV Error details:', {\n                        error: e.target.error,\n                        networkState: e.target.networkState,\n                        readyState: e.target.readyState,\n                        src: e.target.src\n                    });\n                });\n                \n                await new Promise((resolve, reject) => {\n                    const timeout = setTimeout(() => {\n                        reject(new Error('WAV load timeout'));\n                    }, 3000);\n                    \n                    this.music.addEventListener('canplaythrough', () => {\n                        clearTimeout(timeout);\n                        resolve();\n                    }, { once: true });\n                    \n                    this.music.addEventListener('error', (e) => {\n                        clearTimeout(timeout);\n                        reject(e);\n                    }, { once: true });\n                    \n                    this.music.load();\n                });\n                \n                console.log('✅ WAV background music loaded successfully');\n                \n            } catch (wavError) {\n                console.error('❌ Both MP3 and WAV failed:', wavError.message);\n                console.log('💡 Suggestions:');\n                console.log('- Check if files exist in assets/audio/');\n                console.log('- Ensure running from http://localhost (not file://)');\n                console.log('- Check browser console for CORS errors');\n                console.log('- Verify audio file formats are supported');\n                this.music = null;\n            }\n        }\n    }\n    \n    createProgrammaticMusic() {\n        if (!this.audioContext) return;\n        \n        this.musicGainNode = this.audioContext.createGain();\n        this.musicGainNode.connect(this.audioContext.destination);\n        this.musicGainNode.gain.setValueAtTime(this.masterVolume * this.musicVolume * 0.1, this.audioContext.currentTime);\n        \n        this.music = {\n            playing: false,\n            paused: false,\n            volume: this.masterVolume * this.musicVolume,\n            play: () => this.startProgrammaticMusic(),\n            pause: () => this.stopProgrammaticMusic(),\n            currentTime: 0,\n            loop: true\n        };\n        \n        console.log('✅ Programmatic background music ready');\n    }\n    \n    startProgrammaticMusic() {\n        if (!this.audioContext || this.music.playing) return;\n        \n        this.music.playing = true;\n        this.playMelodyLoop();\n    }\n    \n    stopProgrammaticMusic() {\n        this.music.playing = false;\n        if (this.melodyTimeout) {\n            clearTimeout(this.melodyTimeout);\n        }\n    }\n    \n    playMelodyLoop() {\n        if (!this.music.playing) return;\n        \n        const melody = [262, 294, 330, 349, 392, 440, 494, 523];\n        const rhythm = [0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 1];\n        \n        let noteIndex = 0;\n        const playNote = () => {\n            if (!this.music.playing) return;\n            \n            const freq = melody[noteIndex % melody.length];\n            const duration = rhythm[noteIndex % rhythm.length] * 0.3;\n            \n            const oscillator = this.audioContext.createOscillator();\n            const noteGain = this.audioContext.createGain();\n            \n            oscillator.connect(noteGain);\n            noteGain.connect(this.musicGainNode);\n            \n            oscillator.frequency.setValueAtTime(freq, this.audioContext.currentTime);\n            oscillator.type = 'square';\n            \n            noteGain.gain.setValueAtTime(0.1, this.audioContext.currentTime);\n            noteGain.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);\n            \n            oscillator.start(this.audioContext.currentTime);\n            oscillator.stop(this.audioContext.currentTime + duration);\n            \n            noteIndex++;\n            this.melodyTimeout = setTimeout(playNote, duration * 1000);\n        };\n        \n        playNote();\n    }\n\n    playSound(soundName, volume = 1.0) {\n        if (!this.soundEnabled || !this.audioContext) return;\n        \n        try {\n            const finalVolume = this.masterVolume * this.soundVolume * volume;\n            \n            switch (soundName) {\n                case 'throw':\n                    this.playThrowSound(finalVolume);\n                    break;\n                case 'catch':\n                    this.playCatchSound(finalVolume);\n                    break;\n                case 'score':\n                    this.playScoreSound(finalVolume);\n                    break;\n                case 'whistle':\n                    this.playWhistleSound(finalVolume);\n                    break;\n            }\n        } catch (error) {\n            console.warn(`Error playing sound: ${soundName}`, error);\n        }\n    }\n    \n    playThrowSound(volume) {\n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        oscillator.frequency.setValueAtTime(200, this.audioContext.currentTime);\n        oscillator.frequency.exponentialRampToValueAtTime(100, this.audioContext.currentTime + 0.2);\n        \n        gainNode.gain.setValueAtTime(volume * 0.3, this.audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.2);\n        \n        oscillator.start(this.audioContext.currentTime);\n        oscillator.stop(this.audioContext.currentTime + 0.2);\n    }\n    \n    playCatchSound(volume) {\n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        oscillator.frequency.setValueAtTime(400, this.audioContext.currentTime);\n        oscillator.frequency.exponentialRampToValueAtTime(600, this.audioContext.currentTime + 0.1);\n        \n        gainNode.gain.setValueAtTime(volume * 0.2, this.audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.1);\n        \n        oscillator.start(this.audioContext.currentTime);\n        oscillator.stop(this.audioContext.currentTime + 0.1);\n    }\n    \n    playScoreSound(volume) {\n        // Play a celebratory ascending tone\n        const frequencies = [262, 330, 392, 523]; // C, E, G, C\n        frequencies.forEach((freq, index) => {\n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            oscillator.frequency.setValueAtTime(freq, this.audioContext.currentTime + index * 0.1);\n            gainNode.gain.setValueAtTime(volume * 0.2, this.audioContext.currentTime + index * 0.1);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + index * 0.1 + 0.2);\n            \n            oscillator.start(this.audioContext.currentTime + index * 0.1);\n            oscillator.stop(this.audioContext.currentTime + index * 0.1 + 0.2);\n        });\n    }\n    \n    playWhistleSound(volume) {\n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);\n        gainNode.gain.setValueAtTime(volume * 0.3, this.audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.5);\n        \n        oscillator.start(this.audioContext.currentTime);\n        oscillator.stop(this.audioContext.currentTime + 0.5);\n    }\n\n    playMusic() {\n        if (!this.musicEnabled || !this.music) {\n            console.log('🔇 Music disabled or not loaded');\n            return;\n        }\n        \n        try {\n            this.music.volume = this.masterVolume * this.musicVolume;\n            console.log(`🎵 Attempting to play music at volume: ${this.music.volume}`);\n            \n            this.music.play().then(() => {\n                console.log('✅ Background music started playing');\n            }).catch(error => {\n                console.warn('❌ Failed to play background music:', error.message);\n                if (error.name === 'NotAllowedError') {\n                    console.log('💡 User interaction required - music will start after first click');\n                }\n            });\n        } catch (error) {\n            console.warn('Error playing background music', error);\n        }\n    }\n\n    stopMusic() {\n        if (this.music) {\n            try {\n                this.music.pause();\n                this.music.currentTime = 0;\n            } catch (error) {\n                console.warn('Error stopping background music', error);\n            }\n        }\n    }\n\n    pauseMusic() {\n        if (this.music) {\n            try {\n                this.music.pause();\n            } catch (error) {\n                console.warn('Error pausing background music', error);\n            }\n        }\n    }\n\n    resumeMusic() {\n        if (this.musicEnabled && this.music) {\n            try {\n                this.music.play().catch(error => {\n                    console.warn('Failed to resume background music', error);\n                });\n            } catch (error) {\n                console.warn('Error resuming background music', error);\n            }\n        }\n    }\n\n    setSoundEnabled(enabled) {\n        this.soundEnabled = enabled;\n    }\n\n    setMusicEnabled(enabled) {\n        this.musicEnabled = enabled;\n        if (!enabled) {\n            this.stopMusic();\n        } else {\n            this.playMusic();\n        }\n    }\n\n    setMasterVolume(volume) {\n        this.masterVolume = Math.max(0, Math.min(1, volume));\n        if (this.music) {\n            this.music.volume = this.masterVolume * this.musicVolume;\n        }\n    }\n\n    setSoundVolume(volume) {\n        this.soundVolume = Math.max(0, Math.min(1, volume));\n    }\n\n    setMusicVolume(volume) {\n        this.musicVolume = Math.max(0, Math.min(1, volume));\n        if (this.music) {\n            this.music.volume = this.masterVolume * this.musicVolume;\n        }\n    }\n\n\n    // Game event handlers\n    onThrow() {\n        this.playSound('throw');\n    }\n\n    onCatch() {\n        this.playSound('catch');\n    }\n\n    onScore() {\n        this.playSound('score', 1.2);\n    }\n\n    onGameStart() {\n        this.playSound('whistle');\n        this.playMusic();\n    }\n\n    onGameEnd() {\n        this.playSound('whistle');\n        this.stopMusic();\n    }\n\n    onGamePause() {\n        this.pauseMusic();\n    }\n\n    onGameResume() {\n        this.resumeMusic();\n    }\n    \n    // Call this after first user interaction to enable audio\n    enableAudioContext() {\n        if (this.audioContext && this.audioContext.state === 'suspended') {\n            this.audioContext.resume().then(() => {\n                console.log('✅ Audio context resumed');\n            });\n        }\n        \n        // Try to play music if it failed before\n        if (this.musicEnabled && this.music && this.music.paused) {\n            this.playMusic();\n        }\n    }\n}","import { CONFIG } from '../config.js';\n\n/**\n * Canvas Renderer for game graphics\n */\nexport class CanvasRenderer {\n    constructor(canvas, assetLoader) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.assetLoader = assetLoader;\n        \n        // Set canvas size\n        this.canvas.width = CONFIG.CANVAS_WIDTH;\n        this.canvas.height = CONFIG.CANVAS_HEIGHT;\n        \n        // Disable image smoothing for pixel-perfect 8-bit graphics\n        this.ctx.imageSmoothingEnabled = false;\n    }\n\n    clear() {\n        this.ctx.fillStyle = CONFIG.COLORS.FIELD;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    drawField() {\n        // Draw field background\n        this.ctx.fillStyle = CONFIG.COLORS.FIELD;\n        this.ctx.fillRect(0, 0, CONFIG.CANVAS_WIDTH, CONFIG.CANVAS_HEIGHT);\n        \n        // Draw end zones\n        this.ctx.fillStyle = CONFIG.COLORS.END_ZONE;\n        this.ctx.fillRect(0, 0, CONFIG.END_ZONE_WIDTH, CONFIG.CANVAS_HEIGHT);\n        this.ctx.fillRect(CONFIG.CANVAS_WIDTH - CONFIG.END_ZONE_WIDTH, 0, CONFIG.END_ZONE_WIDTH, CONFIG.CANVAS_HEIGHT);\n        \n        // Draw field lines\n        this.ctx.strokeStyle = CONFIG.COLORS.FIELD_LINES;\n        this.ctx.lineWidth = 2;\n        \n        // End zone lines\n        this.ctx.beginPath();\n        this.ctx.moveTo(CONFIG.END_ZONE_WIDTH, 0);\n        this.ctx.lineTo(CONFIG.END_ZONE_WIDTH, CONFIG.CANVAS_HEIGHT);\n        this.ctx.moveTo(CONFIG.CANVAS_WIDTH - CONFIG.END_ZONE_WIDTH, 0);\n        this.ctx.lineTo(CONFIG.CANVAS_WIDTH - CONFIG.END_ZONE_WIDTH, CONFIG.CANVAS_HEIGHT);\n        this.ctx.stroke();\n        \n        // Center line\n        this.ctx.beginPath();\n        this.ctx.moveTo(CONFIG.CANVAS_WIDTH / 2, 0);\n        this.ctx.lineTo(CONFIG.CANVAS_WIDTH / 2, CONFIG.CANVAS_HEIGHT);\n        this.ctx.stroke();\n    }\n\n    drawPlayer(player) {\n        const spriteName = player.team === 1 ? 'player-team1' : 'player-team2';\n        const sprite = this.assetLoader.getAsset(spriteName);\n        \n        if (sprite && sprite.width > 0) {\n            this.ctx.drawImage(\n                sprite,\n                player.x - CONFIG.PLAYER_SIZE / 2,\n                player.y - CONFIG.PLAYER_SIZE / 2,\n                CONFIG.PLAYER_SIZE,\n                CONFIG.PLAYER_SIZE\n            );\n        } else {\n            // Fallback to colored rectangles\n            this.ctx.fillStyle = player.team === 1 ? CONFIG.COLORS.TEAM1 : CONFIG.COLORS.TEAM2;\n            this.ctx.fillRect(\n                player.x - CONFIG.PLAYER_SIZE / 2,\n                player.y - CONFIG.PLAYER_SIZE / 2,\n                CONFIG.PLAYER_SIZE,\n                CONFIG.PLAYER_SIZE\n            );\n        }\n        \n        // Draw player number\n        this.ctx.fillStyle = CONFIG.COLORS.UI_TEXT;\n        this.ctx.font = '10px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(\n            player.number.toString(),\n            player.x,\n            player.y - CONFIG.PLAYER_SIZE / 2 - 5\n        );\n        \n        // Highlight player with frisbee\n        if (player.hasFrisbee) {\n            this.ctx.strokeStyle = CONFIG.COLORS.FRISBEE;\n            this.ctx.lineWidth = 2;\n            this.ctx.strokeRect(\n                player.x - CONFIG.PLAYER_SIZE / 2 - 2,\n                player.y - CONFIG.PLAYER_SIZE / 2 - 2,\n                CONFIG.PLAYER_SIZE + 4,\n                CONFIG.PLAYER_SIZE + 4\n            );\n        }\n    }\n\n    drawFrisbee(frisbee) {\n        console.log('Drawing frisbee - visible:', frisbee.isVisible, 'flying:', frisbee.isFlying, 'pos:', frisbee.x, frisbee.y);\n        \n        if (!frisbee.isVisible) return;\n        \n        const sprite = this.assetLoader.getAsset('frisbee');\n        \n        if (sprite) {\n            this.ctx.drawImage(\n                sprite,\n                frisbee.x - CONFIG.FRISBEE_SIZE / 2,\n                frisbee.y - CONFIG.FRISBEE_SIZE / 2,\n                CONFIG.FRISBEE_SIZE,\n                CONFIG.FRISBEE_SIZE\n            );\n        } else {\n            // Fallback to colored circle\n            this.ctx.fillStyle = CONFIG.COLORS.FRISBEE;\n            this.ctx.beginPath();\n            this.ctx.arc(frisbee.x, frisbee.y, CONFIG.FRISBEE_SIZE / 2, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        \n        // Draw trajectory line when flying\n        if (frisbee.isFlying) {\n            this.ctx.strokeStyle = CONFIG.COLORS.FRISBEE;\n            this.ctx.lineWidth = 1;\n            this.ctx.setLineDash([5, 5]);\n            this.ctx.beginPath();\n            this.ctx.moveTo(frisbee.startX, frisbee.startY);\n            this.ctx.lineTo(frisbee.x, frisbee.y);\n            this.ctx.stroke();\n            this.ctx.setLineDash([]);\n        }\n    }\n\n    drawUI(gameState) {\n        const state = gameState.getState();\n        \n        // Draw score\n        this.ctx.fillStyle = CONFIG.COLORS.UI_TEXT;\n        this.ctx.font = '20px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(\n            `${state.score.team1} - ${state.score.team2}`,\n            CONFIG.CANVAS_WIDTH / 2,\n            30\n        );\n        \n        // Draw timer\n        const minutes = Math.floor(state.gameTime / 60);\n        const seconds = Math.floor(state.gameTime % 60);\n        const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n        this.ctx.fillText(timeString, CONFIG.CANVAS_WIDTH / 2, 55);\n        \n        // Draw game status\n        if (state.currentScreen === 'pause') {\n            this.drawPauseOverlay();\n        } else if (state.currentScreen === 'gameOver') {\n            this.drawGameOverOverlay(state);\n        }\n    }\n\n    drawPauseOverlay() {\n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.fillRect(0, 0, CONFIG.CANVAS_WIDTH, CONFIG.CANVAS_HEIGHT);\n        \n        // Pause text\n        this.ctx.fillStyle = CONFIG.COLORS.UI_TEXT;\n        this.ctx.font = '40px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('PAUSED', CONFIG.CANVAS_WIDTH / 2, CONFIG.CANVAS_HEIGHT / 2);\n        \n        this.ctx.font = '16px monospace';\n        this.ctx.fillText('Press SPACE to resume', CONFIG.CANVAS_WIDTH / 2, CONFIG.CANVAS_HEIGHT / 2 + 40);\n    }\n\n    drawGameOverOverlay(state) {\n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        this.ctx.fillRect(0, 0, CONFIG.CANVAS_WIDTH, CONFIG.CANVAS_HEIGHT);\n        \n        // Game over text\n        this.ctx.fillStyle = CONFIG.COLORS.UI_TEXT;\n        this.ctx.font = '40px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('GAME OVER', CONFIG.CANVAS_WIDTH / 2, CONFIG.CANVAS_HEIGHT / 2 - 40);\n        \n        // Winner announcement\n        const winner = state.score.team1 > state.score.team2 ? 'Red Team' : 'Blue Team';\n        this.ctx.font = '24px monospace';\n        this.ctx.fillText(`${winner} Wins!`, CONFIG.CANVAS_WIDTH / 2, CONFIG.CANVAS_HEIGHT / 2);\n        \n        // Final score\n        this.ctx.font = '20px monospace';\n        this.ctx.fillText(\n            `Final Score: ${state.score.team1} - ${state.score.team2}`,\n            CONFIG.CANVAS_WIDTH / 2,\n            CONFIG.CANVAS_HEIGHT / 2 + 40\n        );\n        \n        this.ctx.font = '16px monospace';\n        this.ctx.fillText('Press R to restart', CONFIG.CANVAS_WIDTH / 2, CONFIG.CANVAS_HEIGHT / 2 + 80);\n    }\n\n    drawMenu() {\n        this.clear();\n        \n        // Title\n        this.ctx.fillStyle = CONFIG.COLORS.UI_TEXT;\n        this.ctx.font = '48px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('ULTIMATE', CONFIG.CANVAS_WIDTH / 2, 80);\n        this.ctx.fillText('FRISBEE', CONFIG.CANVAS_WIDTH / 2, 130);\n        \n        // Welcome message\n        this.ctx.font = '16px monospace';\n        this.ctx.fillStyle = '#88ff88';\n        this.ctx.fillText('Welcome to the ultimate arcade frisbee experience!', CONFIG.CANVAS_WIDTH / 2, 165);\n        this.ctx.fillStyle = CONFIG.COLORS.UI_TEXT;\n        \n        // Controls section\n        this.ctx.font = '20px monospace';\n        this.ctx.fillText('CONTROLS', CONFIG.CANVAS_WIDTH / 2, 200);\n        \n        this.ctx.font = '14px monospace';\n        this.ctx.textAlign = 'left';\n        const leftCol = 200;\n        const rightCol = 500;\n        let y = 240;\n        \n        // Movement controls\n        this.ctx.fillText('MOVEMENT:', leftCol, y);\n        this.ctx.fillText('WASD or Arrow Keys', rightCol, y);\n        y += 25;\n        \n        // Throwing\n        this.ctx.fillText('THROW FRISBEE:', leftCol, y);\n        this.ctx.fillText('Click target location', rightCol, y);\n        y += 25;\n        \n        // Game controls\n        this.ctx.fillText('START GAME:', leftCol, y);\n        this.ctx.fillText('SPACE', rightCol, y);\n        y += 25;\n        \n        this.ctx.fillText('PAUSE/RESUME:', leftCol, y);\n        this.ctx.fillText('SPACE or ESC', rightCol, y);\n        y += 25;\n        \n        this.ctx.fillText('RESTART GAME:', leftCol, y);\n        this.ctx.fillText('R', rightCol, y);\n        y += 25;\n        \n        this.ctx.fillText('MAIN MENU:', leftCol, y);\n        this.ctx.fillText('M', rightCol, y);\n        y += 25;\n        \n        this.ctx.fillText('SELECT PLAYER:', leftCol, y);\n        this.ctx.fillText('1, 2, 3', rightCol, y);\n        y += 40;\n        \n        // Game rules\n        this.ctx.font = '16px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('OBJECTIVE: Score by reaching opponent\\'s end zone with frisbee', CONFIG.CANVAS_WIDTH / 2, y);\n        y += 25;\n        this.ctx.fillText('3 minutes • First to 7 points wins', CONFIG.CANVAS_WIDTH / 2, y);\n        y += 40;\n        \n        // Start instruction\n        this.ctx.font = '18px monospace';\n        this.ctx.fillStyle = '#ffff44';\n        this.ctx.fillText('Press SPACE to start!', CONFIG.CANVAS_WIDTH / 2, y);\n    }\n}","/**\n * Input Handler for keyboard and mouse input\n */\nexport class InputHandler {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.keys = new Set();\n        this.mouse = { x: 0, y: 0, clicked: false };\n        this.callbacks = new Map();\n        \n        this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n        // Keyboard events\n        document.addEventListener('keydown', (e) => this.handleKeyDown(e));\n        document.addEventListener('keyup', (e) => this.handleKeyUp(e));\n        \n        // Mouse events\n        this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));\n        this.canvas.addEventListener('mousedown', (e) => this.handleMouseDown(e));\n        this.canvas.addEventListener('mouseup', (e) => this.handleMouseUp(e));\n        \n        // Prevent context menu on right click\n        this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\n    }\n\n    handleKeyDown(event) {\n        this.keys.add(event.code);\n        this.triggerCallback('keydown', event.code);\n    }\n\n    handleKeyUp(event) {\n        this.keys.delete(event.code);\n        this.triggerCallback('keyup', event.code);\n    }\n\n    handleMouseMove(event) {\n        const rect = this.canvas.getBoundingClientRect();\n        this.mouse.x = event.clientX - rect.left;\n        this.mouse.y = event.clientY - rect.top;\n        this.triggerCallback('mousemove', this.mouse);\n    }\n\n    handleMouseDown(event) {\n        this.mouse.clicked = true;\n        this.triggerCallback('mousedown', this.mouse);\n    }\n\n    handleMouseUp(event) {\n        this.mouse.clicked = false;\n        this.triggerCallback('mouseup', this.mouse);\n    }\n\n    isKeyPressed(keyCode) {\n        return this.keys.has(keyCode);\n    }\n\n    getMovementVector() {\n        let x = 0;\n        let y = 0;\n        \n        if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) x -= 1;\n        if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) x += 1;\n        if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) y -= 1;\n        if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) y += 1;\n        \n        // Normalize diagonal movement\n        if (x !== 0 && y !== 0) {\n            const length = Math.sqrt(x * x + y * y);\n            x /= length;\n            y /= length;\n        }\n        \n        return { x, y };\n    }\n\n    isActionPressed(action) {\n        switch (action) {\n            case 'pause':\n                return this.isKeyPressed('Space') || this.isKeyPressed('Escape');\n            case 'restart':\n                return this.isKeyPressed('KeyR');\n            case 'throw':\n                return this.mouse.clicked;\n            default:\n                return false;\n        }\n    }\n\n    getMousePosition() {\n        return { x: this.mouse.x, y: this.mouse.y };\n    }\n\n    on(event, callback) {\n        if (!this.callbacks.has(event)) {\n            this.callbacks.set(event, []);\n        }\n        this.callbacks.get(event).push(callback);\n    }\n\n    off(event, callback) {\n        const callbacks = this.callbacks.get(event);\n        if (callbacks) {\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n    }\n\n    triggerCallback(event, data) {\n        const callbacks = this.callbacks.get(event);\n        if (callbacks) {\n            callbacks.forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error('Error in input callback:', error);\n                }\n            });\n        }\n    }\n\n    destroy() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n        document.removeEventListener('keyup', this.handleKeyUp);\n        this.canvas.removeEventListener('mousemove', this.handleMouseMove);\n        this.canvas.removeEventListener('mousedown', this.handleMouseDown);\n        this.canvas.removeEventListener('mouseup', this.handleMouseUp);\n        this.canvas.removeEventListener('contextmenu', (e) => e.preventDefault());\n    }\n}","import { CONFIG } from '../config.js';\n\n/**\n * Game Controller - Central game orchestration\n */\nexport class GameController {\n    constructor(gameState, physicsEngine, aiController, audioManager, renderer, inputHandler) {\n        this.gameState = gameState;\n        this.physics = physicsEngine;\n        this.ai = aiController;\n        this.audio = audioManager;\n        this.renderer = renderer;\n        this.input = inputHandler;\n        \n        this.players = [];\n        this.frisbee = null;\n        this.lastTime = 0;\n        this.gameLoop = null;\n        \n        this.initializeGame();\n        this.setupInputHandlers();\n    }\n\n    initializeGame() {\n        this.createPlayers();\n        this.createFrisbee();\n        this.gameState.setState('currentScreen', 'menu');\n        this.startMenuLoop();\n    }\n\n    createPlayers() {\n        this.players = [];\n        \n        // Team 1 (Red) - Human controlled\n        for (let i = 0; i < CONFIG.TEAM_SIZE; i++) {\n            this.players.push({\n                id: `team1_${i}`,\n                team: 1,\n                number: i + 1,\n                x: 150 + i * 50,\n                y: 200 + i * 100,\n                velocityX: 0,\n                velocityY: 0,\n                size: CONFIG.PLAYER_SIZE,\n                hasFrisbee: i === 0,\n                isAI: false,\n                isSelected: i === 0\n            });\n        }\n        \n        // Team 2 (Blue) - AI controlled\n        for (let i = 0; i < CONFIG.TEAM_SIZE; i++) {\n            this.players.push({\n                id: `team2_${i}`,\n                team: 2,\n                number: i + 1,\n                x: 650 - i * 50,\n                y: 200 + i * 100,\n                velocityX: 0,\n                velocityY: 0,\n                size: CONFIG.PLAYER_SIZE,\n                hasFrisbee: false,\n                isAI: true,\n                isSelected: false\n            });\n        }\n    }\n\n    createFrisbee() {\n        this.frisbee = {\n            x: this.players[0].x,\n            y: this.players[0].y,\n            velocityX: 0,\n            velocityY: 0,\n            size: CONFIG.FRISBEE_SIZE,\n            isFlying: false,\n            isVisible: false,\n            startX: 0,\n            startY: 0,\n            owner: this.players[0]\n        };\n    }\n\n    setupInputHandlers() {\n        this.input.on('keydown', (key) => {\n            const state = this.gameState.getState('currentScreen');\n            \n            if (key === 'Space') {\n                // Enable audio on first interaction\n                this.audio.enableAudioContext();\n                \n                if (state === 'menu') {\n                    this.startGame();\n                } else if (state === 'game') {\n                    this.pauseGame();\n                } else if (state === 'pause') {\n                    this.resumeGame();\n                }\n            }\n            \n            if (key === 'KeyR') {\n                this.restartGame();\n            }\n            \n            if (key === 'KeyM') {\n                this.goToMenu();\n            }\n            \n            // Player selection with number keys (1, 2, 3)\n            if (key === 'Digit1') {\n                this.selectPlayer(1);\n            }\n            if (key === 'Digit2') {\n                this.selectPlayer(2);\n            }\n            if (key === 'Digit3') {\n                this.selectPlayer(3);\n            }\n        });\n        \n        this.input.on('mousedown', (mouse) => {\n            // Enable audio on first interaction\n            this.audio.enableAudioContext();\n            \n            if (this.gameState.getState('currentScreen') === 'game') {\n                this.handleThrow(mouse.x, mouse.y);\n            }\n        });\n    }\n\n    startGame() {\n        this.stopGameLoop();\n        this.gameState.setState('currentScreen', 'game');\n        this.gameState.setState('gameTime', CONFIG.GAME_DURATION);\n        try {\n            this.audio.onGameStart();\n        } catch (e) {\n            console.warn('Audio failed to start:', e);\n        }\n        this.startGameLoop();\n    }\n\n    pauseGame() {\n        this.gameState.setState('currentScreen', 'pause');\n        this.audio.onGamePause();\n        this.stopGameLoop();\n    }\n\n    resumeGame() {\n        this.gameState.setState('currentScreen', 'game');\n        this.audio.onGameResume();\n        this.startGameLoop();\n    }\n\n    restartGame() {\n        this.gameState.reset();\n        this.initializeGame();\n        this.startGame();\n    }\n    \n    goToMenu() {\n        this.stopGameLoop();\n        this.gameState.reset();\n        this.initializeGame();\n    }\n    \n    selectPlayer(playerNumber) {\n        // Only allow selecting team 1 (human) players\n        const targetPlayer = this.players.find(p => p.team === 1 && p.number === playerNumber);\n        if (targetPlayer) {\n            // Clear all selections\n            this.players.forEach(p => p.isSelected = false);\n            // Select the target player\n            targetPlayer.isSelected = true;\n            console.log(`Selected player ${playerNumber}`);\n        }\n    }\n\n    startGameLoop() {\n        this.stopGameLoop();\n        this.lastTime = performance.now();\n        this.gameLoop = requestAnimationFrame((time) => this.update(time));\n    }\n    \n    startMenuLoop() {\n        if (this.gameLoop) return;\n        \n        this.gameLoop = requestAnimationFrame(() => this.renderMenu());\n    }\n    \n    renderMenu() {\n        this.render();\n        if (this.gameState.getState('currentScreen') === 'menu') {\n            this.gameLoop = requestAnimationFrame(() => this.renderMenu());\n        }\n    }\n\n    stopGameLoop() {\n        if (this.gameLoop) {\n            cancelAnimationFrame(this.gameLoop);\n            this.gameLoop = null;\n        }\n    }\n\n    update(currentTime) {\n        const deltaTime = (currentTime - this.lastTime) / 1000;\n        this.lastTime = currentTime;\n        \n        if (this.gameState.getState('currentScreen') === 'game') {\n            this.updateGame(deltaTime);\n            this.updateTimer(deltaTime);\n        }\n        \n        this.render();\n        \n        if (this.gameState.getState('currentScreen') === 'game') {\n            this.gameLoop = requestAnimationFrame((time) => this.update(time));\n        }\n    }\n\n    updateGame(deltaTime) {\n        this.updatePlayerMovement(deltaTime);\n        this.updateFrisbee(deltaTime);\n        // this.ai.update(deltaTime, this.players, this.frisbee); // Disabled - AI handled in updatePlayerMovement\n        this.checkCollisions();\n        this.checkScoring();\n    }\n\n    updatePlayerMovement(deltaTime) {\n        const selectedPlayer = this.players.find(p => p.isSelected);\n        if (selectedPlayer && !selectedPlayer.isAI && !selectedPlayer.hasFrisbee) {\n            const movement = this.input.getMovementVector();\n            selectedPlayer.velocityX = movement.x * CONFIG.PLAYER_SPEED;\n            selectedPlayer.velocityY = movement.y * CONFIG.PLAYER_SPEED;\n        }\n        \n        // Basic AI for inactive red team players\n        this.players.forEach(redPlayer => {\n            if (!redPlayer.isAI && !redPlayer.isSelected && !redPlayer.hasFrisbee) {\n                const humanWithFrisbee = this.players.find(p => p.team === 1 && p.hasFrisbee);\n                const aiWithFrisbee = this.players.find(p => p.team === 2 && p.hasFrisbee);\n                \n                if (this.frisbee.isVisible && this.frisbee.isFlying) {\n                    // Chase flying frisbee\n                    const dx = this.frisbee.x - redPlayer.x;\n                    const dy = this.frisbee.y - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    \n                    if (distance > 10) {\n                        redPlayer.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED * 0.7;\n                        redPlayer.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED * 0.7;\n                    }\n                } else if (this.frisbee.isVisible && !this.frisbee.isFlying) {\n                    // Chase loose frisbee\n                    const dx = this.frisbee.x - redPlayer.x;\n                    const dy = this.frisbee.y - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    \n                    if (distance > 10) {\n                        redPlayer.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED * 0.8;\n                        redPlayer.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED * 0.8;\n                    }\n                } else if (aiWithFrisbee) {\n                    // Defensive: pressure ball carrier while maintaining spacing\n                    const teammates = this.players.filter(p => p.team === 1 && p !== redPlayer);\n                    \n                    let targetX = aiWithFrisbee.x;\n                    let targetY = aiWithFrisbee.y;\n                    \n                    // Avoid clustering with teammates on defense\n                    teammates.forEach(teammate => {\n                        const dx = redPlayer.x - teammate.x;\n                        const dy = redPlayer.y - teammate.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        \n                        if (distance < 60) {\n                            targetX += dx * 0.3;\n                            targetY += dy * 0.3;\n                        }\n                    });\n                    \n                    const dx = targetX - redPlayer.x;\n                    const dy = targetY - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    \n                    if (distance > 30) {\n                        redPlayer.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED * 0.7;\n                        redPlayer.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED * 0.7;\n                    } else {\n                        // Keep moving around the ball carrier\n                        redPlayer.velocityX = (Math.random() - 0.5) * CONFIG.PLAYER_SPEED * 0.4;\n                        redPlayer.velocityY = (Math.random() - 0.5) * CONFIG.PLAYER_SPEED * 0.4;\n                    }\n                } else if (humanWithFrisbee) {\n                    // Offensive: spread out and get open for passes\n                    const teammates = this.players.filter(p => p.team === 1 && p !== redPlayer);\n                    const opponents = this.players.filter(p => p.team === 2);\n                    \n                    let targetX = CONFIG.CANVAS_WIDTH - 50; // Toward goal\n                    let targetY = CONFIG.CANVAS_HEIGHT / 2 + (Math.random() - 0.5) * 120;\n                    \n                    // Spread out from teammates\n                    teammates.forEach(teammate => {\n                        const dx = redPlayer.x - teammate.x;\n                        const dy = redPlayer.y - teammate.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        \n                        if (distance < 70) {\n                            targetX += dx * 0.4;\n                            targetY += dy * 0.4;\n                        }\n                    });\n                    \n                    // Check if passing lane to frisbee holder is blocked\n                    const passingLaneBlocked = opponents.some(opponent => {\n                        const distToLine = this.distanceToLine(humanWithFrisbee.x, humanWithFrisbee.y, redPlayer.x, redPlayer.y, opponent.x, opponent.y);\n                        return distToLine < 25; // 25 pixel buffer for passing lane\n                    });\n                    \n                    if (passingLaneBlocked) {\n                        // Move perpendicular to the passing lane to get open\n                        const dx = redPlayer.x - humanWithFrisbee.x;\n                        const dy = redPlayer.y - humanWithFrisbee.y;\n                        const perpX = -dy; // Perpendicular direction\n                        const perpY = dx;\n                        const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n                        \n                        if (perpLength > 0) {\n                            targetX += (perpX / perpLength) * 60;\n                            targetY += (perpY / perpLength) * 60;\n                        }\n                    }\n                    \n                    // Also avoid being too close to defenders\n                    const nearestDefender = opponents.reduce((nearest, opponent) => {\n                        const distance = Math.sqrt((opponent.x - redPlayer.x) ** 2 + (opponent.y - redPlayer.y) ** 2);\n                        return !nearest || distance < nearest.distance ? {player: opponent, distance} : nearest;\n                    }, null);\n                    \n                    if (nearestDefender && nearestDefender.distance < 40) {\n                        const dx = redPlayer.x - nearestDefender.player.x;\n                        const dy = redPlayer.y - nearestDefender.player.y;\n                        targetX += dx * 0.6;\n                        targetY += dy * 0.6;\n                    }\n                    \n                    const dx = targetX - redPlayer.x;\n                    const dy = targetY - redPlayer.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    \n                    if (distance > 15) {\n                        redPlayer.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED * 0.6;\n                        redPlayer.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED * 0.6;\n                    } else {\n                        // Keep moving to stay open\n                        redPlayer.velocityX = (Math.random() - 0.5) * CONFIG.PLAYER_SPEED * 0.3;\n                        redPlayer.velocityY = (Math.random() - 0.5) * CONFIG.PLAYER_SPEED * 0.3;\n                    }\n                } else {\n                    redPlayer.velocityX = 0;\n                    redPlayer.velocityY = 0;\n                }\n            }\n        });\n        \n        // Blue team AI behavior\n        this.players.forEach(player => {\n            if (player.isAI) {\n                if (player.hasFrisbee) {\n                    // AI with frisbee: throw to teammate or toward goal\n                    if (!player.aiThrowTimer) player.aiThrowTimer = 0;\n                    player.aiThrowTimer += deltaTime;\n                    \n                    if (player.aiThrowTimer > 1) { // Wait 1 second before throwing\n                        const teammates = this.players.filter(p => p.team === player.team && p !== player);\n                        const opponents = this.players.filter(p => p.team !== player.team);\n                        \n                        // Find best teammate with clear passing lane\n                        const bestTeammate = teammates.reduce((best, teammate) => {\n                            const distance = Math.sqrt((teammate.x - player.x) ** 2 + (teammate.y - player.y) ** 2);\n                            \n                            // Check if passing lane is clear (no opponent too close to the line)\n                            const passingLaneClear = !opponents.some(opponent => {\n                                const distToLine = this.distanceToLine(player.x, player.y, teammate.x, teammate.y, opponent.x, opponent.y);\n                                return distToLine < 30; // 30 pixel buffer\n                            });\n                            \n                            if (!passingLaneClear) return best;\n                            \n                            return !best || distance < best.distance ? {player: teammate, distance} : best;\n                        }, null);\n                        \n                        if (bestTeammate && bestTeammate.distance < 200) {\n                            // Throw to teammate with clear lane\n                            this.throwFrisbee(player, bestTeammate.player.x, bestTeammate.player.y);\n                            player.aiThrowTimer = 0;\n                        } else {\n                            // No clear pass, check if teammate is near goal before throwing\n                            if (player.aiThrowTimer > 3) {\n                                const goalX = player.team === 2 ? 50 : CONFIG.CANVAS_WIDTH - 50;\n                                const goalY = CONFIG.CANVAS_HEIGHT / 2;\n                                \n                                // Only throw toward goal if teammate is reasonably close to catch it\n                                const teammateNearGoal = teammates.some(teammate => {\n                                    const distToGoal = Math.sqrt((teammate.x - goalX) ** 2 + (teammate.y - goalY) ** 2);\n                                    return distToGoal < 80; // Teammate within 80 pixels of goal area\n                                });\n                                \n                                if (teammateNearGoal) {\n                                    this.throwFrisbee(player, goalX, goalY);\n                                    player.aiThrowTimer = 0;\n                                } else {\n                                    // No good option, reset timer and wait for better opportunity\n                                    player.aiThrowTimer = 2; // Reset to 2 seconds to try again soon\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // AI without frisbee behavior\n                    const humanWithFrisbee = this.players.find(p => p.team === 1 && p.hasFrisbee);\n                    const aiWithFrisbee = this.players.find(p => p.team === 2 && p.hasFrisbee);\n                    \n                    if (this.frisbee.isVisible && this.frisbee.isFlying) {\n                        // Chase flying frisbee for interception\n                        const dx = this.frisbee.x - player.x;\n                        const dy = this.frisbee.y - player.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        \n                        if (distance > 10) {\n                            player.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED;\n                            player.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED;\n                        } else {\n                            player.velocityX = 0;\n                            player.velocityY = 0;\n                        }\n                    } else if (this.frisbee.isVisible && !this.frisbee.isFlying) {\n                        // Chase loose frisbee\n                        const dx = this.frisbee.x - player.x;\n                        const dy = this.frisbee.y - player.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        \n                        if (distance > 5) {\n                            player.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED;\n                            player.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED;\n                        } else {\n                            player.velocityX = 0;\n                            player.velocityY = 0;\n                        }\n                    } else if (humanWithFrisbee) {\n                        // Defensive: position between assigned player and frisbee holder to block passes\n                        const humanPlayers = this.players.filter(p => p.team === 1);\n                        const aiPlayers = this.players.filter(p => p.team === 2);\n                        const aiIndex = aiPlayers.indexOf(player);\n                        const targetHuman = humanPlayers[aiIndex % humanPlayers.length];\n                        \n                        if (targetHuman && targetHuman !== humanWithFrisbee) {\n                            // Position between frisbee holder and assigned player\n                            const midX = (humanWithFrisbee.x + targetHuman.x) / 2;\n                            const midY = (humanWithFrisbee.y + targetHuman.y) / 2;\n                            \n                            const dx = midX - player.x;\n                            const dy = midY - player.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            \n                            if (distance > 20) {\n                                player.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED * 0.8;\n                                player.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED * 0.8;\n                            } else {\n                                player.velocityX = 0;\n                                player.velocityY = 0;\n                            }\n                        } else if (targetHuman === humanWithFrisbee) {\n                            // If assigned to player with frisbee, pressure them directly\n                            const dx = targetHuman.x - player.x;\n                            const dy = targetHuman.y - player.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            \n                            if (distance > 30) {\n                                player.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED * 0.9;\n                                player.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED * 0.9;\n                            } else {\n                                player.velocityX = 0;\n                                player.velocityY = 0;\n                            }\n                        }\n                    } else if (aiWithFrisbee) {\n                        // Offensive: spread out and avoid both defenders and teammates\n                        const opponents = this.players.filter(p => p.team !== player.team);\n                        const teammates = this.players.filter(p => p.team === player.team && p !== player);\n                        \n                        let targetX = 50; // Default toward goal\n                        let targetY = CONFIG.CANVAS_HEIGHT / 2 + (Math.random() - 0.5) * 150; // Add some randomness\n                        \n                        // Avoid clustering with teammates\n                        teammates.forEach(teammate => {\n                            const dx = player.x - teammate.x;\n                            const dy = player.y - teammate.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            \n                            if (distance < 80) { // Too close to teammate\n                                targetX += dx * 0.5;\n                                targetY += dy * 0.5;\n                            }\n                        });\n                        \n                        // Check if passing lane to teammate with frisbee is blocked\n                        const passingLaneBlocked = opponents.some(opponent => {\n                            const distToLine = this.distanceToLine(aiWithFrisbee.x, aiWithFrisbee.y, player.x, player.y, opponent.x, opponent.y);\n                            return distToLine < 25; // 25 pixel buffer for passing lane\n                        });\n                        \n                        if (passingLaneBlocked) {\n                            // Move perpendicular to the passing lane to get open\n                            const dx = player.x - aiWithFrisbee.x;\n                            const dy = player.y - aiWithFrisbee.y;\n                            const perpX = -dy; // Perpendicular direction\n                            const perpY = dx;\n                            const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n                            \n                            if (perpLength > 0) {\n                                targetX += (perpX / perpLength) * 50;\n                                targetY += (perpY / perpLength) * 50;\n                            }\n                        }\n                        \n                        // Avoid defenders\n                        opponents.forEach(opponent => {\n                            const dx = player.x - opponent.x;\n                            const dy = player.y - opponent.y;\n                            const distance = Math.sqrt(dx * dx + dy * dy);\n                            \n                            if (distance < 60) { // Too close to opponent\n                                targetX += dx * 0.4;\n                                targetY += dy * 0.4;\n                            }\n                        });\n                        \n                        const dx = targetX - player.x;\n                        const dy = targetY - player.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        \n                        if (distance > 15) {\n                            player.velocityX = (dx / distance) * CONFIG.PLAYER_SPEED * 0.7;\n                            player.velocityY = (dy / distance) * CONFIG.PLAYER_SPEED * 0.7;\n                        } else {\n                            // Keep moving even when close to target\n                            player.velocityX = (Math.random() - 0.5) * CONFIG.PLAYER_SPEED * 0.3;\n                            player.velocityY = (Math.random() - 0.5) * CONFIG.PLAYER_SPEED * 0.3;\n                        }\n                    } else {\n                        // No specific target, stay relatively still\n                        player.velocityX = 0;\n                        player.velocityY = 0;\n                    }\n                }\n            }\n            \n            // Update throw timer for players with frisbee\n            if (player.hasFrisbee) {\n                if (!player.throwTimer) player.throwTimer = 0;\n                player.throwTimer += deltaTime;\n                \n                // Force drop after 5 seconds\n                if (player.throwTimer > 5) {\n                    this.dropFrisbee(player);\n                }\n            }\n            \n            this.physics.updatePosition(player, deltaTime);\n        });\n    }\n\n    updateFrisbee(deltaTime) {\n        if (this.frisbee.isFlying) {\n            const distance = Math.sqrt(\n                (this.frisbee.targetX - this.frisbee.startX) ** 2 + \n                (this.frisbee.targetY - this.frisbee.startY) ** 2\n            );\n            const speed = 400; // pixels per second\n            const progressIncrement = deltaTime * speed / distance;\n            \n            this.frisbee.flightProgress += progressIncrement;\n            \n            if (this.frisbee.flightProgress >= 1) {\n                // Reached destination\n                this.frisbee.x = this.frisbee.targetX;\n                this.frisbee.y = this.frisbee.targetY;\n                this.frisbee.isFlying = false;\n                this.frisbee.flightProgress = 1;\n            } else {\n                // Interpolate position\n                const t = this.frisbee.flightProgress;\n                this.frisbee.x = this.frisbee.startX + (this.frisbee.targetX - this.frisbee.startX) * t;\n                this.frisbee.y = this.frisbee.startY + (this.frisbee.targetY - this.frisbee.startY) * t;\n            }\n        }\n    }\n\n    updateTimer(deltaTime) {\n        const currentTime = this.gameState.getState('gameTime');\n        const newTime = Math.max(0, currentTime - deltaTime);\n        this.gameState.setState('gameTime', newTime);\n        \n        if (newTime <= 0) {\n            this.endGame();\n        }\n    }\n\n    handleThrow(targetX, targetY) {\n        const thrower = this.players.find(p => p.hasFrisbee);\n        console.log('Throw attempt - thrower:', !!thrower, 'flying:', this.frisbee.isFlying);\n        \n        if (!thrower) {\n            return;\n        }\n        \n        // Check if clicking on a team 1 player (teammate)\n        const clickedPlayer = this.players.find(p => \n            p.team === 1 && p !== thrower &&\n            Math.abs(p.x - targetX) < CONFIG.PLAYER_SIZE && \n            Math.abs(p.y - targetY) < CONFIG.PLAYER_SIZE\n        );\n        \n        if (clickedPlayer) {\n            this.throwFrisbee(thrower, clickedPlayer.x, clickedPlayer.y);\n        } else {\n            this.throwFrisbee(thrower, targetX, targetY);\n        }\n    }\n\n    throwFrisbee(thrower, targetX, targetY) {\n        console.log('THROWING - from:', thrower.x, thrower.y, 'to:', targetX, targetY);\n        \n        this.frisbee.x = thrower.x;\n        this.frisbee.y = thrower.y;\n        this.frisbee.targetX = targetX;\n        this.frisbee.targetY = targetY;\n        this.frisbee.startX = thrower.x;\n        this.frisbee.startY = thrower.y;\n        this.frisbee.flightProgress = 0;\n        this.frisbee.isFlying = true;\n        this.frisbee.isVisible = true;\n        this.frisbee.throwTime = performance.now();\n        this.frisbee.throwerTeam = thrower.team; // Track who threw it\n        \n        thrower.hasFrisbee = false;\n        thrower.throwTimer = 0; // Reset throw timer\n        \n        console.log('Frisbee state after throw:', {\n            x: this.frisbee.x,\n            y: this.frisbee.y,\n            isFlying: this.frisbee.isFlying,\n            isVisible: this.frisbee.isVisible,\n            throwerTeam: this.frisbee.throwerTeam\n        });\n        \n        try {\n            this.audio.onThrow();\n        } catch (e) {}\n    }\n\n    dropFrisbee(player) {\n        // Player drops frisbee at their location\n        this.frisbee.x = player.x;\n        this.frisbee.y = player.y;\n        this.frisbee.isFlying = false;\n        this.frisbee.isVisible = true;\n        this.frisbee.throwerTeam = player.team; // Mark as dropped by this team\n        \n        player.hasFrisbee = false;\n        player.throwTimer = 0;\n        \n        console.log('Player', player.team, 'dropped frisbee due to 5-second rule');\n    }\n\n    checkCollisions() {\n        // Check collisions for both flying and grounded frisbee\n        if (!this.frisbee.isVisible) return;\n        \n        // If flying, only check collisions after minimum time delay (100ms) to avoid immediate catching\n        if (this.frisbee.isFlying && performance.now() - this.frisbee.throwTime < 100) return;\n        \n        this.players.forEach(player => {\n            // Use larger catch radius for teammates, smaller for opponents\n            const isTeammate = this.frisbee.throwerTeam === player.team;\n            const catchRadius = isTeammate ? CONFIG.PLAYER_SIZE * 0.8 : CONFIG.PLAYER_SIZE * 0.5;\n            \n            const dx = player.x - this.frisbee.x;\n            const dy = player.y - this.frisbee.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            \n            if (distance < catchRadius) {\n                // If frisbee is on ground, only opposing team can pick it up\n                if (!this.frisbee.isFlying && this.frisbee.throwerTeam === player.team) {\n                    return; // Same team can't pick up their own grounded throw\n                }\n                this.catchFrisbee(player);\n            }\n        });\n    }\n\n    catchFrisbee(player) {\n        // Clear any existing frisbee holder\n        this.players.forEach(p => p.hasFrisbee = false);\n        \n        this.frisbee.isFlying = false;\n        this.frisbee.isVisible = false;\n        this.frisbee.x = player.x;\n        this.frisbee.y = player.y;\n        this.frisbee.velocityX = 0;\n        this.frisbee.velocityY = 0;\n        player.hasFrisbee = true;\n        \n        this.audio.onCatch();\n        \n        // Switch selected player if caught by human team\n        if (player.team === 1) {\n            this.players.forEach(p => p.isSelected = false);\n            player.isSelected = true;\n        }\n    }\n\n    checkScoring() {\n        const playerWithFrisbee = this.players.find(p => p.hasFrisbee);\n        if (!playerWithFrisbee) return;\n        \n        const inEndZone = (playerWithFrisbee.team === 1 && playerWithFrisbee.x > CONFIG.CANVAS_WIDTH - CONFIG.END_ZONE_WIDTH) ||\n                         (playerWithFrisbee.team === 2 && playerWithFrisbee.x < CONFIG.END_ZONE_WIDTH);\n        \n        if (inEndZone) {\n            this.score(playerWithFrisbee.team);\n        }\n    }\n\n    score(team) {\n        const currentScore = this.gameState.getState('score');\n        if (team === 1) {\n            currentScore.team1++;\n        } else {\n            currentScore.team2++;\n        }\n        \n        this.gameState.setState('score', currentScore);\n        this.audio.onScore();\n        \n        // Reset positions\n        this.resetPositions();\n        \n        // Check for game end\n        if (currentScore.team1 >= CONFIG.SCORE_TO_WIN || currentScore.team2 >= CONFIG.SCORE_TO_WIN) {\n            this.endGame();\n        }\n    }\n\n    resetPositions() {\n        this.createPlayers();\n        this.createFrisbee();\n    }\n\n    endGame() {\n        this.gameState.setState('currentScreen', 'gameOver');\n        this.audio.onGameEnd();\n        this.stopGameLoop();\n    }\n\n    distanceToLine(x1, y1, x2, y2, px, py) {\n        // Calculate distance from point (px, py) to line segment (x1,y1)-(x2,y2)\n        const A = px - x1;\n        const B = py - y1;\n        const C = x2 - x1;\n        const D = y2 - y1;\n        \n        const dot = A * C + B * D;\n        const lenSq = C * C + D * D;\n        \n        if (lenSq === 0) return Math.sqrt(A * A + B * B);\n        \n        const param = dot / lenSq;\n        let xx, yy;\n        \n        if (param < 0) {\n            xx = x1;\n            yy = y1;\n        } else if (param > 1) {\n            xx = x2;\n            yy = y2;\n        } else {\n            xx = x1 + param * C;\n            yy = y1 + param * D;\n        }\n        \n        const dx = px - xx;\n        const dy = py - yy;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    render() {\n        const currentScreen = this.gameState.getState('currentScreen');\n        // console.log('Rendering screen:', currentScreen);\n        \n        if (currentScreen === 'menu') {\n            this.renderer.drawMenu();\n        } else {\n            this.renderer.clear();\n            this.renderer.drawField();\n            \n            // console.log('Drawing', this.players.length, 'players');\n            this.players.forEach((player, index) => {\n                // console.log(`Drawing player ${index}, team ${player.team}, position (${player.x}, ${player.y})`);\n                this.renderer.drawPlayer(player);\n            });\n            \n            this.renderer.drawFrisbee(this.frisbee);\n            this.renderer.drawUI(this.gameState);\n        }\n    }\n}"],"names":["$a8a4f6cc120ddce7$export$19fffca37ef3e106","prefix","save","key","data","serialized","JSON","stringify","localStorage","setItem","error","console","load","defaultValue","item","getItem","parse","remove","removeItem","clear","keys","Object","forEach","startsWith","$255649eb9271def6$export$356f5f2a609e254f","assets","Map","loadPromises","loadImage","name","path","has","log","get","promise","Promise","resolve","reject","img","Image","onload","set","delete","onerror","Error","src","loadAudio","audio","Audio","oncanplaythrough","loadAssets","assetList","promises","map","asset","type","results","all","getAsset","hasAsset","$3d7acf461522ca86$export$eb5ccdbd077479c","state","currentScreen","score","team1","team2","gameTime","players","frisbee","field","gameSettings","difficulty","soundEnabled","musicEnabled","listeners","setState","value","oldValue","notifyListeners","getState","updateState","updates","subscribe","callback","push","callbacks","index","indexOf","splice","newValue","reset","$7d305a1ba637179b$export$69b1b1c72d4bbb9d","gravity","friction","updatePosition","entity","deltaTime","x","velocityX","y","velocityY","checkBoundaries","halfSize","size","checkCollision","entity1","entity2","dx","dy","distance","Math","sqrt","resolveCollision","overlap","separationX","separationY","calculateThrowVector","fromX","fromY","toX","toY","power","normalizedX","normalizedY","$424d233ae2a12642$export$badae6bab0f3493e","gameState","reactionTime","lastDecision","update","aiPlayers","filter","p","isAI","player","updatePlayerAI","allPlayers","hasFrisbee","handleOffensiveAI","handleDefensiveAI","teammates","team","opponents","bestTarget","bestScore","teammate","evaluateThrowTarget","throwToTarget","isFlying","moveTowards","nearestOpponent","findNearestOpponent","markOpponent","thrower","target","distanceScore","max","getDistance","nearestDefender","min","leadX","leadY","throw","targetX","targetY","opponent","idealDistance","nearest","minDistance","Infinity","setDifficulty","$1cc9a11145b9c8d6$export$557a8016f4e0c1ba","assetLoader","sounds","music","masterVolume","soundVolume","musicVolume","initialize","audioContext","window","AudioContext","webkitAudioContext","loadBackgroundMusic","warn","location","href","protocol","loop","volume","addEventListener","e","networkState","readyState","timeout","setTimeout","clearTimeout","once","message","wavError","createProgrammaticMusic","musicGainNode","createGain","connect","destination","gain","setValueAtTime","currentTime","playing","paused","play","startProgrammaticMusic","pause","stopProgrammaticMusic","playMelodyLoop","melodyTimeout","melody","rhythm","noteIndex","playNote","freq","length","duration","oscillator","createOscillator","noteGain","frequency","exponentialRampToValueAtTime","start","stop","playSound","soundName","finalVolume","playThrowSound","playCatchSound","playScoreSound","playWhistleSound","gainNode","frequencies","playMusic","then","catch","stopMusic","pauseMusic","resumeMusic","setSoundEnabled","enabled","setMusicEnabled","setMasterVolume","setSoundVolume","setMusicVolume","onThrow","onCatch","onScore","onGameStart","onGameEnd","onGamePause","onGameResume","enableAudioContext","resume","$3c41843540f07017$export$7adc20298958481a","canvas","ctx","getContext","width","height","imageSmoothingEnabled","fillStyle","fillRect","drawField","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","drawPlayer","spriteName","sprite","drawImage","font","textAlign","fillText","number","toString","strokeRect","drawFrisbee","isVisible","arc","PI","fill","setLineDash","startX","startY","drawUI","minutes","floor","seconds","timeString","padStart","drawPauseOverlay","drawGameOverOverlay","winner","drawMenu","$e34a11d940d9f889$export$2c7a04567169355e","Set","mouse","clicked","setupEventListeners","document","handleKeyDown","handleKeyUp","handleMouseMove","handleMouseDown","handleMouseUp","preventDefault","event","add","code","triggerCallback","rect","getBoundingClientRect","clientX","left","clientY","top","isKeyPressed","keyCode","getMovementVector","isActionPressed","action","getMousePosition","on","off","destroy","removeEventListener","$196999ef1341334b$export$f3f3f6c0124f08de","physicsEngine","aiController","audioManager","renderer","inputHandler","physics","ai","input","lastTime","gameLoop","initializeGame","setupInputHandlers","createPlayers","createFrisbee","startMenuLoop","i","id","isSelected","owner","startGame","pauseGame","resumeGame","restartGame","goToMenu","selectPlayer","handleThrow","stopGameLoop","startGameLoop","playerNumber","targetPlayer","find","performance","now","requestAnimationFrame","time","renderMenu","render","cancelAnimationFrame","updateGame","updateTimer","updatePlayerMovement","updateFrisbee","checkCollisions","checkScoring","selectedPlayer","movement","redPlayer","humanWithFrisbee","aiWithFrisbee","random","some","distToLine","distanceToLine","perpX","perpLength","perpY","reduce","aiThrowTimer","bestTeammate","best","throwFrisbee","goalX","goalY","distToGoal","humanPlayers","targetHuman","aiIndex","midX","midY","throwTimer","dropFrisbee","flightProgress","t","newTime","endGame","clickedPlayer","abs","throwTime","throwerTeam","isTeammate","catchFrisbee","playerWithFrisbee","inEndZone","currentScore","resetPositions","x1","y1","x2","y2","px","py","xx","yy","A","B","C","D","lenSq","param","dot","$2b6e161c9edcf319$export$ef679666f51623ae","gameController","createCanvas","loadSettings","loadSpritesSync","showError","createElement","style","border","background","app","getElementById","appendChild","body","settings","saveSettings","redImg","blueImg","frisbeeImg","errorDiv","cssText","textContent","game","hidden"],"version":3,"file":"UltimateFrisbeeArcadeGame.f55f99df.js.map"}